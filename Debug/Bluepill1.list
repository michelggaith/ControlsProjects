
Bluepill1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004214  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004324  08004324  00014324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043c0  080043c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080043c0  080043c0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043c0  080043c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043c0  080043c0  000143c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043c4  080043c4  000143c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080043c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  08004438  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08004438  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074aa  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001927  00000000  00000000  00027543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  00028e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  00029650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179fb  00000000  00000000  00029d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000911b  00000000  00000000  00041783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000877f5  00000000  00000000  0004a89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2093  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023d0  00000000  00000000  000d20e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800430c 	.word	0x0800430c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800430c 	.word	0x0800430c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <ADC_Select_CH4>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ADC_Select_CH4(void){
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
	/** Configure Regular Channel
	  */
	  ADC_ChannelConfTypeDef sConfig = {0};
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
	  sConfig.Channel = ADC_CHANNEL_4;
 80009ac:	2304      	movs	r3, #4
 80009ae:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009b0:	2301      	movs	r3, #1
 80009b2:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80009b4:	2303      	movs	r3, #3
 80009b6:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <ADC_Select_CH4+0x38>)
 80009be:	f001 f821 	bl	8001a04 <HAL_ADC_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <ADC_Select_CH4+0x30>
	  {
	    Error_Handler();
 80009c8:	f000 fb78 	bl	80010bc <Error_Handler>
	  }

}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	2000008c 	.word	0x2000008c

080009d8 <ADC_Select_CH5>:
void ADC_Select_CH5(void){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
	/** Configure Regular Channel
		  */
		  ADC_ChannelConfTypeDef sConfig = {0};
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
		  sConfig.Channel = ADC_CHANNEL_5;
 80009e8:	2305      	movs	r3, #5
 80009ea:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ec:	2301      	movs	r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80009f0:	2306      	movs	r3, #6
 80009f2:	60fb      	str	r3, [r7, #12]
		  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <ADC_Select_CH5+0x38>)
 80009fa:	f001 f803 	bl	8001a04 <HAL_ADC_ConfigChannel>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <ADC_Select_CH5+0x30>
		  {
		    Error_Handler();
 8000a04:	f000 fb5a 	bl	80010bc <Error_Handler>
		  }

}
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2000008c 	.word	0x2000008c

08000a14 <ADC_Select_CH6>:

void ADC_Select_CH6(void){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
	/** Configure Regular Channel
			  */
			  ADC_ChannelConfTypeDef sConfig = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
			  sConfig.Channel = ADC_CHANNEL_6;
 8000a24:	2306      	movs	r3, #6
 8000a26:	607b      	str	r3, [r7, #4]
			  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
			  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000a2c:	2307      	movs	r3, #7
 8000a2e:	60fb      	str	r3, [r7, #12]
			  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <ADC_Select_CH6+0x38>)
 8000a36:	f000 ffe5 	bl	8001a04 <HAL_ADC_ConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <ADC_Select_CH6+0x30>
			  {
			    Error_Handler();
 8000a40:	f000 fb3c 	bl	80010bc <Error_Handler>
			  }
}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2000008c 	.word	0x2000008c

08000a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a54:	b0aa      	sub	sp, #168	; 0xa8
 8000a56:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN 1 */
		//volatile uint32_t ADCValue[];
	 uint8_t charValue[50];
	 uint8_t inDig[8];
	 uint8_t dataRec[8]={};
 8000a58:	2300      	movs	r3, #0
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	63bb      	str	r3, [r7, #56]	; 0x38
	 int flag;
	 int dato[9]={};
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	2224      	movs	r2, #36	; 0x24
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f002 ffcd 	bl	8003a08 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6e:	f000 fc7f 	bl	8001370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a72:	f000 f9d1 	bl	8000e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a76:	f000 fa83 	bl	8000f80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a7a:	f000 fa57 	bl	8000f2c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a7e:	f000 fa25 	bl	8000ecc <MX_ADC1_Init>
  while (1)
  {

	  // LECTURA PUERTO SERIE: Los datos estan guardados como ASCII, el programa no avanza hasta que se reciben datos

	  HAL_UART_Receive_IT(&huart2, (uint16_t*)dataRec, sizeof(dataRec));
 8000a82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a86:	2208      	movs	r2, #8
 8000a88:	4619      	mov	r1, r3
 8000a8a:	488b      	ldr	r0, [pc, #556]	; (8000cb8 <main+0x268>)
 8000a8c:	f002 fb2f 	bl	80030ee <HAL_UART_Receive_IT>



	  	dato[0] = (int)(dataRec[0]);
 8000a90:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a94:	613b      	str	r3, [r7, #16]
	  	dato[1] = (int)(dataRec[1]);
 8000a96:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a9a:	617b      	str	r3, [r7, #20]
	  	dato[2] = (int)(dataRec[2]);
 8000a9c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000aa0:	61bb      	str	r3, [r7, #24]
	  	dato[3] = (int)(dataRec[3]);
 8000aa2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000aa6:	61fb      	str	r3, [r7, #28]
	  	dato[4] = (int)(dataRec[4]);
 8000aa8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000aac:	623b      	str	r3, [r7, #32]
	  	dato[5] = (int)(dataRec[5]);
 8000aae:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
	  	dato[6] = (int)(dataRec[6]);
 8000ab4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
	  	dato[7] = (int)(dataRec[7]);
 8000aba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c

	  	//DEFINICION DEL ESTADO DE LAS SALIDAS

	  			if(dato[0]==49){
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	2b31      	cmp	r3, #49	; 0x31
 8000ac4:	d106      	bne.n	8000ad4 <main+0x84>
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000acc:	487b      	ldr	r0, [pc, #492]	; (8000cbc <main+0x26c>)
 8000ace:	f001 fc86 	bl	80023de <HAL_GPIO_WritePin>
 8000ad2:	e005      	b.n	8000ae0 <main+0x90>
	  	}else{HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);}
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ada:	4878      	ldr	r0, [pc, #480]	; (8000cbc <main+0x26c>)
 8000adc:	f001 fc7f 	bl	80023de <HAL_GPIO_WritePin>

	  		  	if(dato[1]==49){
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	2b31      	cmp	r3, #49	; 0x31
 8000ae4:	d106      	bne.n	8000af4 <main+0xa4>
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aec:	4873      	ldr	r0, [pc, #460]	; (8000cbc <main+0x26c>)
 8000aee:	f001 fc76 	bl	80023de <HAL_GPIO_WritePin>
 8000af2:	e005      	b.n	8000b00 <main+0xb0>
	  	}else{HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);}
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000afa:	4870      	ldr	r0, [pc, #448]	; (8000cbc <main+0x26c>)
 8000afc:	f001 fc6f 	bl	80023de <HAL_GPIO_WritePin>

	  		  	if(dato[2]==49){
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	2b31      	cmp	r3, #49	; 0x31
 8000b04:	d106      	bne.n	8000b14 <main+0xc4>
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000b06:	2201      	movs	r2, #1
 8000b08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b0c:	486b      	ldr	r0, [pc, #428]	; (8000cbc <main+0x26c>)
 8000b0e:	f001 fc66 	bl	80023de <HAL_GPIO_WritePin>
 8000b12:	e005      	b.n	8000b20 <main+0xd0>
	  	}else{HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);}
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b1a:	4868      	ldr	r0, [pc, #416]	; (8000cbc <main+0x26c>)
 8000b1c:	f001 fc5f 	bl	80023de <HAL_GPIO_WritePin>

	  		  	if(dato[3]==49){
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2b31      	cmp	r3, #49	; 0x31
 8000b24:	d118      	bne.n	8000b58 <main+0x108>
	  		  		for(int i=0; i<10; i++){
 8000b26:	2300      	movs	r3, #0
 8000b28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000b2a:	e012      	b.n	8000b52 <main+0x102>
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b32:	4862      	ldr	r0, [pc, #392]	; (8000cbc <main+0x26c>)
 8000b34:	f001 fc53 	bl	80023de <HAL_GPIO_WritePin>
	  		HAL_Delay(1000);
 8000b38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b3c:	f000 fc7a 	bl	8001434 <HAL_Delay>
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);}}
 8000b40:	2200      	movs	r2, #0
 8000b42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b46:	485d      	ldr	r0, [pc, #372]	; (8000cbc <main+0x26c>)
 8000b48:	f001 fc49 	bl	80023de <HAL_GPIO_WritePin>
	  		  		for(int i=0; i<10; i++){
 8000b4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b4e:	3301      	adds	r3, #1
 8000b50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000b52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b54:	2b09      	cmp	r3, #9
 8000b56:	dde9      	ble.n	8000b2c <main+0xdc>

	  		  	if(dato[4]==49){
 8000b58:	6a3b      	ldr	r3, [r7, #32]
 8000b5a:	2b31      	cmp	r3, #49	; 0x31
 8000b5c:	d106      	bne.n	8000b6c <main+0x11c>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b64:	4856      	ldr	r0, [pc, #344]	; (8000cc0 <main+0x270>)
 8000b66:	f001 fc3a 	bl	80023de <HAL_GPIO_WritePin>
 8000b6a:	e005      	b.n	8000b78 <main+0x128>
	  	}else{HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);}
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b72:	4853      	ldr	r0, [pc, #332]	; (8000cc0 <main+0x270>)
 8000b74:	f001 fc33 	bl	80023de <HAL_GPIO_WritePin>

	  		  	if(dato[5]==49){
 8000b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7a:	2b31      	cmp	r3, #49	; 0x31
 8000b7c:	d106      	bne.n	8000b8c <main+0x13c>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b84:	484e      	ldr	r0, [pc, #312]	; (8000cc0 <main+0x270>)
 8000b86:	f001 fc2a 	bl	80023de <HAL_GPIO_WritePin>
 8000b8a:	e005      	b.n	8000b98 <main+0x148>
	  	}else{HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);}
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b92:	484b      	ldr	r0, [pc, #300]	; (8000cc0 <main+0x270>)
 8000b94:	f001 fc23 	bl	80023de <HAL_GPIO_WritePin>

	  		  	if(dato[6]==49){
 8000b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b9a:	2b31      	cmp	r3, #49	; 0x31
 8000b9c:	d106      	bne.n	8000bac <main+0x15c>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba4:	4846      	ldr	r0, [pc, #280]	; (8000cc0 <main+0x270>)
 8000ba6:	f001 fc1a 	bl	80023de <HAL_GPIO_WritePin>
 8000baa:	e005      	b.n	8000bb8 <main+0x168>
	  	}else{HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);}
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb2:	4843      	ldr	r0, [pc, #268]	; (8000cc0 <main+0x270>)
 8000bb4:	f001 fc13 	bl	80023de <HAL_GPIO_WritePin>

	  		  	if(dato[7]==49){
 8000bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bba:	2b31      	cmp	r3, #49	; 0x31
 8000bbc:	d106      	bne.n	8000bcc <main+0x17c>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc4:	483e      	ldr	r0, [pc, #248]	; (8000cc0 <main+0x270>)
 8000bc6:	f001 fc0a 	bl	80023de <HAL_GPIO_WritePin>
 8000bca:	e005      	b.n	8000bd8 <main+0x188>
	  	}else{HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);}
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd2:	483b      	ldr	r0, [pc, #236]	; (8000cc0 <main+0x270>)
 8000bd4:	f001 fc03 	bl	80023de <HAL_GPIO_WritePin>


	 	//ETAPA LECTURA DE ENTRADAS DIGITALES//
	  	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){inDig[0] = 1;}
 8000bd8:	2101      	movs	r1, #1
 8000bda:	4838      	ldr	r0, [pc, #224]	; (8000cbc <main+0x26c>)
 8000bdc:	f001 fbe8 	bl	80023b0 <HAL_GPIO_ReadPin>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d003      	beq.n	8000bee <main+0x19e>
 8000be6:	2301      	movs	r3, #1
 8000be8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000bec:	e002      	b.n	8000bf4 <main+0x1a4>
	  	 else{inDig[0] = 0;}
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	  	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)){inDig[1] = 1;}
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	4831      	ldr	r0, [pc, #196]	; (8000cbc <main+0x26c>)
 8000bf8:	f001 fbda 	bl	80023b0 <HAL_GPIO_ReadPin>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <main+0x1ba>
 8000c02:	2301      	movs	r3, #1
 8000c04:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8000c08:	e002      	b.n	8000c10 <main+0x1c0>
	  	 else{inDig[1] = 0; }
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	  	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){inDig[2] = 1;}
 8000c10:	2180      	movs	r1, #128	; 0x80
 8000c12:	482a      	ldr	r0, [pc, #168]	; (8000cbc <main+0x26c>)
 8000c14:	f001 fbcc 	bl	80023b0 <HAL_GPIO_ReadPin>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <main+0x1d6>
 8000c1e:	2301      	movs	r3, #1
 8000c20:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000c24:	e002      	b.n	8000c2c <main+0x1dc>
	  	 else{inDig[2] = 0;}
 8000c26:	2300      	movs	r3, #0
 8000c28:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	  	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)){inDig[3] = 1;}
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4824      	ldr	r0, [pc, #144]	; (8000cc0 <main+0x270>)
 8000c30:	f001 fbbe 	bl	80023b0 <HAL_GPIO_ReadPin>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <main+0x1f2>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000c40:	e002      	b.n	8000c48 <main+0x1f8>
	  	 else{inDig[3] = 0;}
 8000c42:	2300      	movs	r3, #0
 8000c44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	  	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)){inDig[4] = 1;}
 8000c48:	2102      	movs	r1, #2
 8000c4a:	481d      	ldr	r0, [pc, #116]	; (8000cc0 <main+0x270>)
 8000c4c:	f001 fbb0 	bl	80023b0 <HAL_GPIO_ReadPin>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <main+0x20e>
 8000c56:	2301      	movs	r3, #1
 8000c58:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8000c5c:	e002      	b.n	8000c64 <main+0x214>
	  	 else{inDig[4] = 0;}
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

	  	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10)){inDig[5] = 1;}
 8000c64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c68:	4815      	ldr	r0, [pc, #84]	; (8000cc0 <main+0x270>)
 8000c6a:	f001 fba1 	bl	80023b0 <HAL_GPIO_ReadPin>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d003      	beq.n	8000c7c <main+0x22c>
 8000c74:	2301      	movs	r3, #1
 8000c76:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8000c7a:	e002      	b.n	8000c82 <main+0x232>
	  	 else{inDig[5] = 0;}
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	  	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)){inDig[6] = 1;}
 8000c82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c86:	480e      	ldr	r0, [pc, #56]	; (8000cc0 <main+0x270>)
 8000c88:	f001 fb92 	bl	80023b0 <HAL_GPIO_ReadPin>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <main+0x24a>
 8000c92:	2301      	movs	r3, #1
 8000c94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8000c98:	e002      	b.n	8000ca0 <main+0x250>
	  	 else{inDig[6] = 0;}
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

	  	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)){inDig[7] = 1;}
 8000ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca4:	4806      	ldr	r0, [pc, #24]	; (8000cc0 <main+0x270>)
 8000ca6:	f001 fb83 	bl	80023b0 <HAL_GPIO_ReadPin>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d009      	beq.n	8000cc4 <main+0x274>
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8000cb6:	e008      	b.n	8000cca <main+0x27a>
 8000cb8:	200000bc 	.word	0x200000bc
 8000cbc:	40010800 	.word	0x40010800
 8000cc0:	40010c00 	.word	0x40010c00
	  	 else{inDig[7] = 0;}
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	  	//ETAPA MANEJO DE ADC

	  	//CANAL 4
	  	ADC_Select_CH4();
 8000cca:	f7ff fe67 	bl	800099c <ADC_Select_CH4>
	  	HAL_ADC_Start(&hadc1);
 8000cce:	484e      	ldr	r0, [pc, #312]	; (8000e08 <main+0x3b8>)
 8000cd0:	f000 fcac 	bl	800162c <HAL_ADC_Start>
	  	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000cd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cd8:	484b      	ldr	r0, [pc, #300]	; (8000e08 <main+0x3b8>)
 8000cda:	f000 fd81 	bl	80017e0 <HAL_ADC_PollForConversion>
	  	ADCValue[0]= HAL_ADC_GetValue(&hadc1);
 8000cde:	484a      	ldr	r0, [pc, #296]	; (8000e08 <main+0x3b8>)
 8000ce0:	f000 fe84 	bl	80019ec <HAL_ADC_GetValue>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	4b48      	ldr	r3, [pc, #288]	; (8000e0c <main+0x3bc>)
 8000cea:	801a      	strh	r2, [r3, #0]
	  	HAL_ADC_Stop(&hadc1);
 8000cec:	4846      	ldr	r0, [pc, #280]	; (8000e08 <main+0x3b8>)
 8000cee:	f000 fd4b 	bl	8001788 <HAL_ADC_Stop>
	  	//CANAL 5
	  	ADC_Select_CH5();
 8000cf2:	f7ff fe71 	bl	80009d8 <ADC_Select_CH5>
	  	HAL_ADC_Start(&hadc1);
 8000cf6:	4844      	ldr	r0, [pc, #272]	; (8000e08 <main+0x3b8>)
 8000cf8:	f000 fc98 	bl	800162c <HAL_ADC_Start>
	  	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000cfc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d00:	4841      	ldr	r0, [pc, #260]	; (8000e08 <main+0x3b8>)
 8000d02:	f000 fd6d 	bl	80017e0 <HAL_ADC_PollForConversion>
	  	ADCValue[1]= HAL_ADC_GetValue(&hadc1);
 8000d06:	4840      	ldr	r0, [pc, #256]	; (8000e08 <main+0x3b8>)
 8000d08:	f000 fe70 	bl	80019ec <HAL_ADC_GetValue>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	4b3e      	ldr	r3, [pc, #248]	; (8000e0c <main+0x3bc>)
 8000d12:	805a      	strh	r2, [r3, #2]
	  	HAL_ADC_Stop(&hadc1);
 8000d14:	483c      	ldr	r0, [pc, #240]	; (8000e08 <main+0x3b8>)
 8000d16:	f000 fd37 	bl	8001788 <HAL_ADC_Stop>
	  	//CANAL 6
	 	ADC_Select_CH6();
 8000d1a:	f7ff fe7b 	bl	8000a14 <ADC_Select_CH6>
	  	HAL_ADC_Start(&hadc1);
 8000d1e:	483a      	ldr	r0, [pc, #232]	; (8000e08 <main+0x3b8>)
 8000d20:	f000 fc84 	bl	800162c <HAL_ADC_Start>
	  	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000d24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d28:	4837      	ldr	r0, [pc, #220]	; (8000e08 <main+0x3b8>)
 8000d2a:	f000 fd59 	bl	80017e0 <HAL_ADC_PollForConversion>
	  	ADCValue[2]= HAL_ADC_GetValue(&hadc1);
 8000d2e:	4836      	ldr	r0, [pc, #216]	; (8000e08 <main+0x3b8>)
 8000d30:	f000 fe5c 	bl	80019ec <HAL_ADC_GetValue>
 8000d34:	4603      	mov	r3, r0
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	4b34      	ldr	r3, [pc, #208]	; (8000e0c <main+0x3bc>)
 8000d3a:	809a      	strh	r2, [r3, #4]
	  	HAL_ADC_Stop(&hadc1);
 8000d3c:	4832      	ldr	r0, [pc, #200]	; (8000e08 <main+0x3b8>)
 8000d3e:	f000 fd23 	bl	8001788 <HAL_ADC_Stop>

	  	  // ETAPA TRANSMISION VIA UART

	  	temperatura = ADCValue[0]/12.41;
 8000d42:	4b32      	ldr	r3, [pc, #200]	; (8000e0c <main+0x3bc>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fb5c 	bl	8000404 <__aeabi_i2d>
 8000d4c:	a32c      	add	r3, pc, #176	; (adr r3, 8000e00 <main+0x3b0>)
 8000d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d52:	f7ff fceb 	bl	800072c <__aeabi_ddiv>
 8000d56:	4602      	mov	r2, r0
 8000d58:	460b      	mov	r3, r1
 8000d5a:	4610      	mov	r0, r2
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f7ff fdcd 	bl	80008fc <__aeabi_d2f>
 8000d62:	4603      	mov	r3, r0
 8000d64:	67bb      	str	r3, [r7, #120]	; 0x78
	  	} else
	  	{
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	  	}
*/
	  sprintf(charValue, "%lu,%lu,%lu,%lu,%lu,%lu,%lu,%lu,%lu,%lu,%lu,2\n",ADCValue[0],ADCValue[1],ADCValue[2], inDig[0],inDig[1],inDig[2],inDig[3],inDig[4],inDig[5],inDig[6],inDig[7]);
 8000d66:	4b29      	ldr	r3, [pc, #164]	; (8000e0c <main+0x3bc>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	4b27      	ldr	r3, [pc, #156]	; (8000e0c <main+0x3bc>)
 8000d6e:	885b      	ldrh	r3, [r3, #2]
 8000d70:	469e      	mov	lr, r3
 8000d72:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <main+0x3bc>)
 8000d74:	889b      	ldrh	r3, [r3, #4]
 8000d76:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8000d7a:	f897 103d 	ldrb.w	r1, [r7, #61]	; 0x3d
 8000d7e:	f897 003e 	ldrb.w	r0, [r7, #62]	; 0x3e
 8000d82:	4604      	mov	r4, r0
 8000d84:	f897 003f 	ldrb.w	r0, [r7, #63]	; 0x3f
 8000d88:	4605      	mov	r5, r0
 8000d8a:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
 8000d8e:	4606      	mov	r6, r0
 8000d90:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
 8000d9a:	60b8      	str	r0, [r7, #8]
 8000d9c:	f897 0043 	ldrb.w	r0, [r7, #67]	; 0x43
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000da6:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8000daa:	f8cd 8020 	str.w	r8, [sp, #32]
 8000dae:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8000db2:	f8cd 801c 	str.w	r8, [sp, #28]
 8000db6:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8000dba:	f8cd 8018 	str.w	r8, [sp, #24]
 8000dbe:	9605      	str	r6, [sp, #20]
 8000dc0:	9504      	str	r5, [sp, #16]
 8000dc2:	9403      	str	r4, [sp, #12]
 8000dc4:	9102      	str	r1, [sp, #8]
 8000dc6:	9201      	str	r2, [sp, #4]
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	4673      	mov	r3, lr
 8000dcc:	4662      	mov	r2, ip
 8000dce:	4910      	ldr	r1, [pc, #64]	; (8000e10 <main+0x3c0>)
 8000dd0:	f002 fe22 	bl	8003a18 <siprintf>

	      HAL_UART_Transmit(&huart2, (uint8_t*)charValue, strlen(charValue),HAL_MAX_DELAY);
 8000dd4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff f9b9 	bl	8000150 <strlen>
 8000dde:	4603      	mov	r3, r0
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dea:	480a      	ldr	r0, [pc, #40]	; (8000e14 <main+0x3c4>)
 8000dec:	f002 f8ed 	bl	8002fca <HAL_UART_Transmit>
	      	 HAL_Delay(1000);
 8000df0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000df4:	f000 fb1e 	bl	8001434 <HAL_Delay>
	  HAL_UART_Receive_IT(&huart2, (uint16_t*)dataRec, sizeof(dataRec));
 8000df8:	e643      	b.n	8000a82 <main+0x32>
 8000dfa:	bf00      	nop
 8000dfc:	f3af 8000 	nop.w
 8000e00:	851eb852 	.word	0x851eb852
 8000e04:	4028d1eb 	.word	0x4028d1eb
 8000e08:	2000008c 	.word	0x2000008c
 8000e0c:	20000100 	.word	0x20000100
 8000e10:	08004324 	.word	0x08004324
 8000e14:	200000bc 	.word	0x200000bc

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b094      	sub	sp, #80	; 0x50
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e22:	2228      	movs	r2, #40	; 0x28
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f002 fdee 	bl	8003a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e56:	2301      	movs	r3, #1
 8000e58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000e64:	2300      	movs	r3, #0
 8000e66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 facf 	bl	8002410 <HAL_RCC_OscConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000e78:	f000 f920 	bl	80010bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e80:	2302      	movs	r3, #2
 8000e82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e8c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f001 fd3b 	bl	8002914 <HAL_RCC_ClockConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000ea4:	f000 f90a 	bl	80010bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f001 fec6 	bl	8002c44 <HAL_RCCEx_PeriphCLKConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000ebe:	f000 f8fd 	bl	80010bc <Error_Handler>
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3750      	adds	r7, #80	; 0x50
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_ADC1_Init+0x58>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <MX_ADC1_Init+0x5c>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <MX_ADC1_Init+0x58>)
 8000ee4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ee8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_ADC1_Init+0x58>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_ADC1_Init+0x58>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <MX_ADC1_Init+0x58>)
 8000ef8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000efc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_ADC1_Init+0x58>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <MX_ADC1_Init+0x58>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <MX_ADC1_Init+0x58>)
 8000f0c:	f000 fab6 	bl	800147c <HAL_ADC_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000f16:	f000 f8d1 	bl	80010bc <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	2000008c 	.word	0x2000008c
 8000f28:	40012400 	.word	0x40012400

08000f2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <MX_USART2_UART_Init+0x50>)
 8000f34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f52:	220c      	movs	r2, #12
 8000f54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f64:	f001 ffe4 	bl	8002f30 <HAL_UART_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f6e:	f000 f8a5 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200000bc 	.word	0x200000bc
 8000f7c:	40004400 	.word	0x40004400

08000f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f94:	4b45      	ldr	r3, [pc, #276]	; (80010ac <MX_GPIO_Init+0x12c>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a44      	ldr	r2, [pc, #272]	; (80010ac <MX_GPIO_Init+0x12c>)
 8000f9a:	f043 0310 	orr.w	r3, r3, #16
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b42      	ldr	r3, [pc, #264]	; (80010ac <MX_GPIO_Init+0x12c>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 0310 	and.w	r3, r3, #16
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fac:	4b3f      	ldr	r3, [pc, #252]	; (80010ac <MX_GPIO_Init+0x12c>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a3e      	ldr	r2, [pc, #248]	; (80010ac <MX_GPIO_Init+0x12c>)
 8000fb2:	f043 0320 	orr.w	r3, r3, #32
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b3c      	ldr	r3, [pc, #240]	; (80010ac <MX_GPIO_Init+0x12c>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f003 0320 	and.w	r3, r3, #32
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	4b39      	ldr	r3, [pc, #228]	; (80010ac <MX_GPIO_Init+0x12c>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a38      	ldr	r2, [pc, #224]	; (80010ac <MX_GPIO_Init+0x12c>)
 8000fca:	f043 0304 	orr.w	r3, r3, #4
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b36      	ldr	r3, [pc, #216]	; (80010ac <MX_GPIO_Init+0x12c>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fdc:	4b33      	ldr	r3, [pc, #204]	; (80010ac <MX_GPIO_Init+0x12c>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a32      	ldr	r2, [pc, #200]	; (80010ac <MX_GPIO_Init+0x12c>)
 8000fe2:	f043 0308 	orr.w	r3, r3, #8
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b30      	ldr	r3, [pc, #192]	; (80010ac <MX_GPIO_Init+0x12c>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ffa:	482d      	ldr	r0, [pc, #180]	; (80010b0 <MX_GPIO_Init+0x130>)
 8000ffc:	f001 f9ef 	bl	80023de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Salida8_Pin|Salida7_Pin|Salida6_Pin|Salida5_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001006:	482b      	ldr	r0, [pc, #172]	; (80010b4 <MX_GPIO_Init+0x134>)
 8001008:	f001 f9e9 	bl	80023de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Salida4_Pin|Salida3_Pin|Salida2_Pin|Salida1_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001012:	4829      	ldr	r0, [pc, #164]	; (80010b8 <MX_GPIO_Init+0x138>)
 8001014:	f001 f9e3 	bl	80023de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001022:	2302      	movs	r3, #2
 8001024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2302      	movs	r3, #2
 8001028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 0310 	add.w	r3, r7, #16
 800102e:	4619      	mov	r1, r3
 8001030:	481f      	ldr	r0, [pc, #124]	; (80010b0 <MX_GPIO_Init+0x130>)
 8001032:	f001 f839 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Entrada1_Pin Entrada2_Pin Entrada3_Pin */
  GPIO_InitStruct.Pin = Entrada1_Pin|Entrada2_Pin|Entrada3_Pin;
 8001036:	2383      	movs	r3, #131	; 0x83
 8001038:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800103e:	2302      	movs	r3, #2
 8001040:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	4619      	mov	r1, r3
 8001048:	481b      	ldr	r0, [pc, #108]	; (80010b8 <MX_GPIO_Init+0x138>)
 800104a:	f001 f82d 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Entrada4_Pin Entrada5_Pin Entrada6_Pin Entrada7_Pin
                           Entrada8_Pin */
  GPIO_InitStruct.Pin = Entrada4_Pin|Entrada5_Pin|Entrada6_Pin|Entrada7_Pin
 800104e:	f640 6303 	movw	r3, #3587	; 0xe03
 8001052:	613b      	str	r3, [r7, #16]
                          |Entrada8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001058:	2302      	movs	r3, #2
 800105a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	4619      	mov	r1, r3
 8001062:	4814      	ldr	r0, [pc, #80]	; (80010b4 <MX_GPIO_Init+0x134>)
 8001064:	f001 f820 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Salida8_Pin Salida7_Pin Salida6_Pin Salida5_Pin */
  GPIO_InitStruct.Pin = Salida8_Pin|Salida7_Pin|Salida6_Pin|Salida5_Pin;
 8001068:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800106c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001072:	2302      	movs	r3, #2
 8001074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2302      	movs	r3, #2
 8001078:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	4619      	mov	r1, r3
 8001080:	480c      	ldr	r0, [pc, #48]	; (80010b4 <MX_GPIO_Init+0x134>)
 8001082:	f001 f811 	bl	80020a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Salida4_Pin Salida3_Pin Salida2_Pin Salida1_Pin */
  GPIO_InitStruct.Pin = Salida4_Pin|Salida3_Pin|Salida2_Pin|Salida1_Pin;
 8001086:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800108a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	2301      	movs	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001090:	2302      	movs	r3, #2
 8001092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2302      	movs	r3, #2
 8001096:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4619      	mov	r1, r3
 800109e:	4806      	ldr	r0, [pc, #24]	; (80010b8 <MX_GPIO_Init+0x138>)
 80010a0:	f001 f802 	bl	80020a8 <HAL_GPIO_Init>

}
 80010a4:	bf00      	nop
 80010a6:	3720      	adds	r7, #32
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40011000 	.word	0x40011000
 80010b4:	40010c00 	.word	0x40010c00
 80010b8:	40010800 	.word	0x40010800

080010bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c0:	b672      	cpsid	i
}
 80010c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <Error_Handler+0x8>
	...

080010c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_MspInit+0x5c>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	4a14      	ldr	r2, [pc, #80]	; (8001124 <HAL_MspInit+0x5c>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6193      	str	r3, [r2, #24]
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_MspInit+0x5c>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e6:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <HAL_MspInit+0x5c>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <HAL_MspInit+0x5c>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f0:	61d3      	str	r3, [r2, #28]
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <HAL_MspInit+0x5c>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <HAL_MspInit+0x60>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	4a04      	ldr	r2, [pc, #16]	; (8001128 <HAL_MspInit+0x60>)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111a:	bf00      	nop
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	40021000 	.word	0x40021000
 8001128:	40010000 	.word	0x40010000

0800112c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a14      	ldr	r2, [pc, #80]	; (8001198 <HAL_ADC_MspInit+0x6c>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d121      	bne.n	8001190 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <HAL_ADC_MspInit+0x70>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	4a12      	ldr	r2, [pc, #72]	; (800119c <HAL_ADC_MspInit+0x70>)
 8001152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001156:	6193      	str	r3, [r2, #24]
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <HAL_ADC_MspInit+0x70>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b0d      	ldr	r3, [pc, #52]	; (800119c <HAL_ADC_MspInit+0x70>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a0c      	ldr	r2, [pc, #48]	; (800119c <HAL_ADC_MspInit+0x70>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_ADC_MspInit+0x70>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800117c:	2370      	movs	r3, #112	; 0x70
 800117e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001180:	2303      	movs	r3, #3
 8001182:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	4619      	mov	r1, r3
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <HAL_ADC_MspInit+0x74>)
 800118c:	f000 ff8c 	bl	80020a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001190:	bf00      	nop
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40012400 	.word	0x40012400
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010800 	.word	0x40010800

080011a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a1f      	ldr	r2, [pc, #124]	; (800123c <HAL_UART_MspInit+0x98>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d137      	bne.n	8001234 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011c4:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <HAL_UART_MspInit+0x9c>)
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	4a1d      	ldr	r2, [pc, #116]	; (8001240 <HAL_UART_MspInit+0x9c>)
 80011ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ce:	61d3      	str	r3, [r2, #28]
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <HAL_UART_MspInit+0x9c>)
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <HAL_UART_MspInit+0x9c>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a17      	ldr	r2, [pc, #92]	; (8001240 <HAL_UART_MspInit+0x9c>)
 80011e2:	f043 0304 	orr.w	r3, r3, #4
 80011e6:	6193      	str	r3, [r2, #24]
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_UART_MspInit+0x9c>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011f4:	2304      	movs	r3, #4
 80011f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	4619      	mov	r1, r3
 8001206:	480f      	ldr	r0, [pc, #60]	; (8001244 <HAL_UART_MspInit+0xa0>)
 8001208:	f000 ff4e 	bl	80020a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800120c:	2308      	movs	r3, #8
 800120e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4619      	mov	r1, r3
 800121e:	4809      	ldr	r0, [pc, #36]	; (8001244 <HAL_UART_MspInit+0xa0>)
 8001220:	f000 ff42 	bl	80020a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	2100      	movs	r1, #0
 8001228:	2026      	movs	r0, #38	; 0x26
 800122a:	f000 fe56 	bl	8001eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800122e:	2026      	movs	r0, #38	; 0x26
 8001230:	f000 fe6f 	bl	8001f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001234:	bf00      	nop
 8001236:	3720      	adds	r7, #32
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40004400 	.word	0x40004400
 8001240:	40021000 	.word	0x40021000
 8001244:	40010800 	.word	0x40010800

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800124c:	e7fe      	b.n	800124c <NMI_Handler+0x4>

0800124e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <MemManage_Handler+0x4>

0800125a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <UsageFault_Handler+0x4>

08001266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr

0800128a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128e:	f000 f8b5 	bl	80013fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <USART2_IRQHandler+0x10>)
 800129e:	f001 ff57 	bl	8003150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200000bc 	.word	0x200000bc

080012ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b4:	4a14      	ldr	r2, [pc, #80]	; (8001308 <_sbrk+0x5c>)
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <_sbrk+0x60>)
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <_sbrk+0x64>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <_sbrk+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012dc:	f002 fb6a 	bl	80039b4 <__errno>
 80012e0:	4603      	mov	r3, r0
 80012e2:	220c      	movs	r2, #12
 80012e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	e009      	b.n	8001300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <_sbrk+0x64>)
 80012fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20005000 	.word	0x20005000
 800130c:	00000400 	.word	0x00000400
 8001310:	20000108 	.word	0x20000108
 8001314:	20000120 	.word	0x20000120

08001318 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001324:	480c      	ldr	r0, [pc, #48]	; (8001358 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001326:	490d      	ldr	r1, [pc, #52]	; (800135c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800132c:	e002      	b.n	8001334 <LoopCopyDataInit>

0800132e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001332:	3304      	adds	r3, #4

08001334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001338:	d3f9      	bcc.n	800132e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800133c:	4c0a      	ldr	r4, [pc, #40]	; (8001368 <LoopFillZerobss+0x22>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001340:	e001      	b.n	8001346 <LoopFillZerobss>

08001342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001344:	3204      	adds	r2, #4

08001346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001348:	d3fb      	bcc.n	8001342 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800134a:	f7ff ffe5 	bl	8001318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800134e:	f002 fb37 	bl	80039c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001352:	f7ff fb7d 	bl	8000a50 <main>
  bx lr
 8001356:	4770      	bx	lr
  ldr r0, =_sdata
 8001358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800135c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001360:	080043c8 	.word	0x080043c8
  ldr r2, =_sbss
 8001364:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001368:	20000120 	.word	0x20000120

0800136c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800136c:	e7fe      	b.n	800136c <ADC1_2_IRQHandler>
	...

08001370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_Init+0x28>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a07      	ldr	r2, [pc, #28]	; (8001398 <HAL_Init+0x28>)
 800137a:	f043 0310 	orr.w	r3, r3, #16
 800137e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001380:	2003      	movs	r0, #3
 8001382:	f000 fd9f 	bl	8001ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001386:	200f      	movs	r0, #15
 8001388:	f000 f808 	bl	800139c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800138c:	f7ff fe9c 	bl	80010c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40022000 	.word	0x40022000

0800139c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_InitTick+0x54>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_InitTick+0x58>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4619      	mov	r1, r3
 80013ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 fdb7 	bl	8001f2e <HAL_SYSTICK_Config>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00e      	b.n	80013e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b0f      	cmp	r3, #15
 80013ce:	d80a      	bhi.n	80013e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d0:	2200      	movs	r2, #0
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	f000 fd7f 	bl	8001eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013dc:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <HAL_InitTick+0x5c>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e000      	b.n	80013e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000008 	.word	0x20000008
 80013f8:	20000004 	.word	0x20000004

080013fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_IncTick+0x1c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <HAL_IncTick+0x20>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4413      	add	r3, r2
 800140c:	4a03      	ldr	r2, [pc, #12]	; (800141c <HAL_IncTick+0x20>)
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	20000008 	.word	0x20000008
 800141c:	2000010c 	.word	0x2000010c

08001420 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return uwTick;
 8001424:	4b02      	ldr	r3, [pc, #8]	; (8001430 <HAL_GetTick+0x10>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	2000010c 	.word	0x2000010c

08001434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800143c:	f7ff fff0 	bl	8001420 <HAL_GetTick>
 8001440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d005      	beq.n	800145a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_Delay+0x44>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4413      	add	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800145a:	bf00      	nop
 800145c:	f7ff ffe0 	bl	8001420 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	429a      	cmp	r2, r3
 800146a:	d8f7      	bhi.n	800145c <HAL_Delay+0x28>
  {
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000008 	.word	0x20000008

0800147c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e0be      	b.n	800161c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d109      	bne.n	80014c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fe36 	bl	800112c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 fbf1 	bl	8001ca8 <ADC_ConversionStop_Disable>
 80014c6:	4603      	mov	r3, r0
 80014c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f040 8099 	bne.w	800160a <HAL_ADC_Init+0x18e>
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f040 8095 	bne.w	800160a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014e8:	f023 0302 	bic.w	r3, r3, #2
 80014ec:	f043 0202 	orr.w	r2, r3, #2
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	7b1b      	ldrb	r3, [r3, #12]
 8001502:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001504:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	4313      	orrs	r3, r2
 800150a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001514:	d003      	beq.n	800151e <HAL_ADC_Init+0xa2>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d102      	bne.n	8001524 <HAL_ADC_Init+0xa8>
 800151e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001522:	e000      	b.n	8001526 <HAL_ADC_Init+0xaa>
 8001524:	2300      	movs	r3, #0
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7d1b      	ldrb	r3, [r3, #20]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d119      	bne.n	8001568 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	7b1b      	ldrb	r3, [r3, #12]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d109      	bne.n	8001550 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	3b01      	subs	r3, #1
 8001542:	035a      	lsls	r2, r3, #13
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	e00b      	b.n	8001568 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001554:	f043 0220 	orr.w	r2, r3, #32
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001560:	f043 0201 	orr.w	r2, r3, #1
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	430a      	orrs	r2, r1
 800157a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	4b28      	ldr	r3, [pc, #160]	; (8001624 <HAL_ADC_Init+0x1a8>)
 8001584:	4013      	ands	r3, r2
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	68b9      	ldr	r1, [r7, #8]
 800158c:	430b      	orrs	r3, r1
 800158e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001598:	d003      	beq.n	80015a2 <HAL_ADC_Init+0x126>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d104      	bne.n	80015ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	051b      	lsls	r3, r3, #20
 80015aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	430a      	orrs	r2, r1
 80015be:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_ADC_Init+0x1ac>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d10b      	bne.n	80015e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015da:	f023 0303 	bic.w	r3, r3, #3
 80015de:	f043 0201 	orr.w	r2, r3, #1
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015e6:	e018      	b.n	800161a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ec:	f023 0312 	bic.w	r3, r3, #18
 80015f0:	f043 0210 	orr.w	r2, r3, #16
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	f043 0201 	orr.w	r2, r3, #1
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001608:	e007      	b.n	800161a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160e:	f043 0210 	orr.w	r2, r3, #16
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800161a:	7dfb      	ldrb	r3, [r7, #23]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	ffe1f7fd 	.word	0xffe1f7fd
 8001628:	ff1f0efe 	.word	0xff1f0efe

0800162c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800163e:	2b01      	cmp	r3, #1
 8001640:	d101      	bne.n	8001646 <HAL_ADC_Start+0x1a>
 8001642:	2302      	movs	r3, #2
 8001644:	e098      	b.n	8001778 <HAL_ADC_Start+0x14c>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fad0 	bl	8001bf4 <ADC_Enable>
 8001654:	4603      	mov	r3, r0
 8001656:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	2b00      	cmp	r3, #0
 800165c:	f040 8087 	bne.w	800176e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a41      	ldr	r2, [pc, #260]	; (8001780 <HAL_ADC_Start+0x154>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d105      	bne.n	800168a <HAL_ADC_Start+0x5e>
 800167e:	4b41      	ldr	r3, [pc, #260]	; (8001784 <HAL_ADC_Start+0x158>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d115      	bne.n	80016b6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d026      	beq.n	80016f2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016b4:	e01d      	b.n	80016f2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a2f      	ldr	r2, [pc, #188]	; (8001784 <HAL_ADC_Start+0x158>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d004      	beq.n	80016d6 <HAL_ADC_Start+0xaa>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a2b      	ldr	r2, [pc, #172]	; (8001780 <HAL_ADC_Start+0x154>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d10d      	bne.n	80016f2 <HAL_ADC_Start+0xc6>
 80016d6:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <HAL_ADC_Start+0x158>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d007      	beq.n	80016f2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d006      	beq.n	800170c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001702:	f023 0206 	bic.w	r2, r3, #6
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	62da      	str	r2, [r3, #44]	; 0x2c
 800170a:	e002      	b.n	8001712 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f06f 0202 	mvn.w	r2, #2
 8001722:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800172e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001732:	d113      	bne.n	800175c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001738:	4a11      	ldr	r2, [pc, #68]	; (8001780 <HAL_ADC_Start+0x154>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d105      	bne.n	800174a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_ADC_Start+0x158>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001746:	2b00      	cmp	r3, #0
 8001748:	d108      	bne.n	800175c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	e00c      	b.n	8001776 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	e003      	b.n	8001776 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001776:	7bfb      	ldrb	r3, [r7, #15]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40012800 	.word	0x40012800
 8001784:	40012400 	.word	0x40012400

08001788 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800179a:	2b01      	cmp	r3, #1
 800179c:	d101      	bne.n	80017a2 <HAL_ADC_Stop+0x1a>
 800179e:	2302      	movs	r3, #2
 80017a0:	e01a      	b.n	80017d8 <HAL_ADC_Stop+0x50>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 fa7c 	bl	8001ca8 <ADC_ConversionStop_Disable>
 80017b0:	4603      	mov	r3, r0
 80017b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	f043 0201 	orr.w	r2, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b087      	sub	sp, #28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80017f6:	f7ff fe13 	bl	8001420 <HAL_GetTick>
 80017fa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00b      	beq.n	8001822 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	f043 0220 	orr.w	r2, r3, #32
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e0d3      	b.n	80019ca <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182c:	2b00      	cmp	r3, #0
 800182e:	d131      	bne.n	8001894 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800183a:	2b00      	cmp	r3, #0
 800183c:	d12a      	bne.n	8001894 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800183e:	e021      	b.n	8001884 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001846:	d01d      	beq.n	8001884 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d007      	beq.n	800185e <HAL_ADC_PollForConversion+0x7e>
 800184e:	f7ff fde7 	bl	8001420 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d212      	bcs.n	8001884 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10b      	bne.n	8001884 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001870:	f043 0204 	orr.w	r2, r3, #4
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e0a2      	b.n	80019ca <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0d6      	beq.n	8001840 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001892:	e070      	b.n	8001976 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001894:	4b4f      	ldr	r3, [pc, #316]	; (80019d4 <HAL_ADC_PollForConversion+0x1f4>)
 8001896:	681c      	ldr	r4, [r3, #0]
 8001898:	2002      	movs	r0, #2
 800189a:	f001 fa89 	bl	8002db0 <HAL_RCCEx_GetPeriphCLKFreq>
 800189e:	4603      	mov	r3, r0
 80018a0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6919      	ldr	r1, [r3, #16]
 80018aa:	4b4b      	ldr	r3, [pc, #300]	; (80019d8 <HAL_ADC_PollForConversion+0x1f8>)
 80018ac:	400b      	ands	r3, r1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d118      	bne.n	80018e4 <HAL_ADC_PollForConversion+0x104>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68d9      	ldr	r1, [r3, #12]
 80018b8:	4b48      	ldr	r3, [pc, #288]	; (80019dc <HAL_ADC_PollForConversion+0x1fc>)
 80018ba:	400b      	ands	r3, r1
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d111      	bne.n	80018e4 <HAL_ADC_PollForConversion+0x104>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6919      	ldr	r1, [r3, #16]
 80018c6:	4b46      	ldr	r3, [pc, #280]	; (80019e0 <HAL_ADC_PollForConversion+0x200>)
 80018c8:	400b      	ands	r3, r1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d108      	bne.n	80018e0 <HAL_ADC_PollForConversion+0x100>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68d9      	ldr	r1, [r3, #12]
 80018d4:	4b43      	ldr	r3, [pc, #268]	; (80019e4 <HAL_ADC_PollForConversion+0x204>)
 80018d6:	400b      	ands	r3, r1
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_ADC_PollForConversion+0x100>
 80018dc:	2314      	movs	r3, #20
 80018de:	e020      	b.n	8001922 <HAL_ADC_PollForConversion+0x142>
 80018e0:	2329      	movs	r3, #41	; 0x29
 80018e2:	e01e      	b.n	8001922 <HAL_ADC_PollForConversion+0x142>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6919      	ldr	r1, [r3, #16]
 80018ea:	4b3d      	ldr	r3, [pc, #244]	; (80019e0 <HAL_ADC_PollForConversion+0x200>)
 80018ec:	400b      	ands	r3, r1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d106      	bne.n	8001900 <HAL_ADC_PollForConversion+0x120>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68d9      	ldr	r1, [r3, #12]
 80018f8:	4b3a      	ldr	r3, [pc, #232]	; (80019e4 <HAL_ADC_PollForConversion+0x204>)
 80018fa:	400b      	ands	r3, r1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00d      	beq.n	800191c <HAL_ADC_PollForConversion+0x13c>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6919      	ldr	r1, [r3, #16]
 8001906:	4b38      	ldr	r3, [pc, #224]	; (80019e8 <HAL_ADC_PollForConversion+0x208>)
 8001908:	400b      	ands	r3, r1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d108      	bne.n	8001920 <HAL_ADC_PollForConversion+0x140>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68d9      	ldr	r1, [r3, #12]
 8001914:	4b34      	ldr	r3, [pc, #208]	; (80019e8 <HAL_ADC_PollForConversion+0x208>)
 8001916:	400b      	ands	r3, r1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_ADC_PollForConversion+0x140>
 800191c:	2354      	movs	r3, #84	; 0x54
 800191e:	e000      	b.n	8001922 <HAL_ADC_PollForConversion+0x142>
 8001920:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001922:	fb02 f303 	mul.w	r3, r2, r3
 8001926:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001928:	e021      	b.n	800196e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001930:	d01a      	beq.n	8001968 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d007      	beq.n	8001948 <HAL_ADC_PollForConversion+0x168>
 8001938:	f7ff fd72 	bl	8001420 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d20f      	bcs.n	8001968 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	429a      	cmp	r2, r3
 800194e:	d90b      	bls.n	8001968 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001954:	f043 0204 	orr.w	r2, r3, #4
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e030      	b.n	80019ca <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3301      	adds	r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	429a      	cmp	r2, r3
 8001974:	d8d9      	bhi.n	800192a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f06f 0212 	mvn.w	r2, #18
 800197e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001996:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800199a:	d115      	bne.n	80019c8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d111      	bne.n	80019c8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d105      	bne.n	80019c8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	f043 0201 	orr.w	r2, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	371c      	adds	r7, #28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd90      	pop	{r4, r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000000 	.word	0x20000000
 80019d8:	24924924 	.word	0x24924924
 80019dc:	00924924 	.word	0x00924924
 80019e0:	12492492 	.word	0x12492492
 80019e4:	00492492 	.word	0x00492492
 80019e8:	00249249 	.word	0x00249249

080019ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x20>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e0dc      	b.n	8001bde <HAL_ADC_ConfigChannel+0x1da>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b06      	cmp	r3, #6
 8001a32:	d81c      	bhi.n	8001a6e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	3b05      	subs	r3, #5
 8001a46:	221f      	movs	r2, #31
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	4019      	ands	r1, r3
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3b05      	subs	r3, #5
 8001a60:	fa00 f203 	lsl.w	r2, r0, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	635a      	str	r2, [r3, #52]	; 0x34
 8001a6c:	e03c      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b0c      	cmp	r3, #12
 8001a74:	d81c      	bhi.n	8001ab0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	3b23      	subs	r3, #35	; 0x23
 8001a88:	221f      	movs	r2, #31
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	4019      	ands	r1, r3
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3b23      	subs	r3, #35	; 0x23
 8001aa2:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	631a      	str	r2, [r3, #48]	; 0x30
 8001aae:	e01b      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b41      	subs	r3, #65	; 0x41
 8001ac2:	221f      	movs	r2, #31
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	4019      	ands	r1, r3
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	3b41      	subs	r3, #65	; 0x41
 8001adc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b09      	cmp	r3, #9
 8001aee:	d91c      	bls.n	8001b2a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68d9      	ldr	r1, [r3, #12]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4613      	mov	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	3b1e      	subs	r3, #30
 8001b02:	2207      	movs	r2, #7
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	4019      	ands	r1, r3
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	6898      	ldr	r0, [r3, #8]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4613      	mov	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	3b1e      	subs	r3, #30
 8001b1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	60da      	str	r2, [r3, #12]
 8001b28:	e019      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6919      	ldr	r1, [r3, #16]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	2207      	movs	r2, #7
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	4019      	ands	r1, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	6898      	ldr	r0, [r3, #8]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4413      	add	r3, r2
 8001b52:	fa00 f203 	lsl.w	r2, r0, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b10      	cmp	r3, #16
 8001b64:	d003      	beq.n	8001b6e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b6a:	2b11      	cmp	r3, #17
 8001b6c:	d132      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a1d      	ldr	r2, [pc, #116]	; (8001be8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d125      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d126      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b94:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b10      	cmp	r3, #16
 8001b9c:	d11a      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <HAL_ADC_ConfigChannel+0x1e8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba8:	0c9a      	lsrs	r2, r3, #18
 8001baa:	4613      	mov	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bb4:	e002      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f9      	bne.n	8001bb6 <HAL_ADC_ConfigChannel+0x1b2>
 8001bc2:	e007      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc8:	f043 0220 	orr.w	r2, r3, #32
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	40012400 	.word	0x40012400
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	431bde83 	.word	0x431bde83

08001bf4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d040      	beq.n	8001c94 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0201 	orr.w	r2, r2, #1
 8001c20:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c22:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <ADC_Enable+0xac>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a1f      	ldr	r2, [pc, #124]	; (8001ca4 <ADC_Enable+0xb0>)
 8001c28:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2c:	0c9b      	lsrs	r3, r3, #18
 8001c2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c30:	e002      	b.n	8001c38 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f9      	bne.n	8001c32 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c3e:	f7ff fbef 	bl	8001420 <HAL_GetTick>
 8001c42:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c44:	e01f      	b.n	8001c86 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c46:	f7ff fbeb 	bl	8001420 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d918      	bls.n	8001c86 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d011      	beq.n	8001c86 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c66:	f043 0210 	orr.w	r2, r3, #16
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	f043 0201 	orr.w	r2, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e007      	b.n	8001c96 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d1d8      	bne.n	8001c46 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000000 	.word	0x20000000
 8001ca4:	431bde83 	.word	0x431bde83

08001ca8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d12e      	bne.n	8001d20 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0201 	bic.w	r2, r2, #1
 8001cd0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cd2:	f7ff fba5 	bl	8001420 <HAL_GetTick>
 8001cd6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cd8:	e01b      	b.n	8001d12 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cda:	f7ff fba1 	bl	8001420 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d914      	bls.n	8001d12 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d10d      	bne.n	8001d12 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	f043 0210 	orr.w	r2, r3, #16
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d06:	f043 0201 	orr.w	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e007      	b.n	8001d22 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d0dc      	beq.n	8001cda <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5e:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	60d3      	str	r3, [r2, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <__NVIC_GetPriorityGrouping+0x18>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	f003 0307 	and.w	r3, r3, #7
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	db0b      	blt.n	8001dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	f003 021f 	and.w	r2, r3, #31
 8001da8:	4906      	ldr	r1, [pc, #24]	; (8001dc4 <__NVIC_EnableIRQ+0x34>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	2001      	movs	r0, #1
 8001db2:	fa00 f202 	lsl.w	r2, r0, r2
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	e000e100 	.word	0xe000e100

08001dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	6039      	str	r1, [r7, #0]
 8001dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	db0a      	blt.n	8001df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	490c      	ldr	r1, [pc, #48]	; (8001e14 <__NVIC_SetPriority+0x4c>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	0112      	lsls	r2, r2, #4
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	440b      	add	r3, r1
 8001dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df0:	e00a      	b.n	8001e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	4908      	ldr	r1, [pc, #32]	; (8001e18 <__NVIC_SetPriority+0x50>)
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	3b04      	subs	r3, #4
 8001e00:	0112      	lsls	r2, r2, #4
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	440b      	add	r3, r1
 8001e06:	761a      	strb	r2, [r3, #24]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000e100 	.word	0xe000e100
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	; 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f1c3 0307 	rsb	r3, r3, #7
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	bf28      	it	cs
 8001e3a:	2304      	movcs	r3, #4
 8001e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3304      	adds	r3, #4
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d902      	bls.n	8001e4c <NVIC_EncodePriority+0x30>
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3b03      	subs	r3, #3
 8001e4a:	e000      	b.n	8001e4e <NVIC_EncodePriority+0x32>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	f04f 32ff 	mov.w	r2, #4294967295
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	401a      	ands	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	43d9      	mvns	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	4313      	orrs	r3, r2
         );
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3724      	adds	r7, #36	; 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e90:	d301      	bcc.n	8001e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00f      	b.n	8001eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <SysTick_Config+0x40>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9e:	210f      	movs	r1, #15
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea4:	f7ff ff90 	bl	8001dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <SysTick_Config+0x40>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <SysTick_Config+0x40>)
 8001eb0:	2207      	movs	r2, #7
 8001eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	e000e010 	.word	0xe000e010

08001ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ff2d 	bl	8001d2c <__NVIC_SetPriorityGrouping>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eec:	f7ff ff42 	bl	8001d74 <__NVIC_GetPriorityGrouping>
 8001ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	6978      	ldr	r0, [r7, #20]
 8001ef8:	f7ff ff90 	bl	8001e1c <NVIC_EncodePriority>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff5f 	bl	8001dc8 <__NVIC_SetPriority>
}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff35 	bl	8001d90 <__NVIC_EnableIRQ>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ffa2 	bl	8001e80 <SysTick_Config>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b085      	sub	sp, #20
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d008      	beq.n	8001f6e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2204      	movs	r2, #4
 8001f60:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e020      	b.n	8001fb0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 020e 	bic.w	r2, r2, #14
 8001f7c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0201 	bic.w	r2, r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f96:	2101      	movs	r1, #1
 8001f98:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr
	...

08001fbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d005      	beq.n	8001fde <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]
 8001fdc:	e051      	b.n	8002082 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 020e 	bic.w	r2, r2, #14
 8001fec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a22      	ldr	r2, [pc, #136]	; (800208c <HAL_DMA_Abort_IT+0xd0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d029      	beq.n	800205c <HAL_DMA_Abort_IT+0xa0>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a20      	ldr	r2, [pc, #128]	; (8002090 <HAL_DMA_Abort_IT+0xd4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d022      	beq.n	8002058 <HAL_DMA_Abort_IT+0x9c>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <HAL_DMA_Abort_IT+0xd8>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d01a      	beq.n	8002052 <HAL_DMA_Abort_IT+0x96>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1d      	ldr	r2, [pc, #116]	; (8002098 <HAL_DMA_Abort_IT+0xdc>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d012      	beq.n	800204c <HAL_DMA_Abort_IT+0x90>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1c      	ldr	r2, [pc, #112]	; (800209c <HAL_DMA_Abort_IT+0xe0>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d00a      	beq.n	8002046 <HAL_DMA_Abort_IT+0x8a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1a      	ldr	r2, [pc, #104]	; (80020a0 <HAL_DMA_Abort_IT+0xe4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d102      	bne.n	8002040 <HAL_DMA_Abort_IT+0x84>
 800203a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800203e:	e00e      	b.n	800205e <HAL_DMA_Abort_IT+0xa2>
 8002040:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002044:	e00b      	b.n	800205e <HAL_DMA_Abort_IT+0xa2>
 8002046:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800204a:	e008      	b.n	800205e <HAL_DMA_Abort_IT+0xa2>
 800204c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002050:	e005      	b.n	800205e <HAL_DMA_Abort_IT+0xa2>
 8002052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002056:	e002      	b.n	800205e <HAL_DMA_Abort_IT+0xa2>
 8002058:	2310      	movs	r3, #16
 800205a:	e000      	b.n	800205e <HAL_DMA_Abort_IT+0xa2>
 800205c:	2301      	movs	r3, #1
 800205e:	4a11      	ldr	r2, [pc, #68]	; (80020a4 <HAL_DMA_Abort_IT+0xe8>)
 8002060:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	4798      	blx	r3
    } 
  }
  return status;
 8002082:	7bfb      	ldrb	r3, [r7, #15]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40020008 	.word	0x40020008
 8002090:	4002001c 	.word	0x4002001c
 8002094:	40020030 	.word	0x40020030
 8002098:	40020044 	.word	0x40020044
 800209c:	40020058 	.word	0x40020058
 80020a0:	4002006c 	.word	0x4002006c
 80020a4:	40020000 	.word	0x40020000

080020a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b08b      	sub	sp, #44	; 0x2c
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020b6:	2300      	movs	r3, #0
 80020b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ba:	e169      	b.n	8002390 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020bc:	2201      	movs	r2, #1
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	f040 8158 	bne.w	800238a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	4a9a      	ldr	r2, [pc, #616]	; (8002348 <HAL_GPIO_Init+0x2a0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d05e      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
 80020e4:	4a98      	ldr	r2, [pc, #608]	; (8002348 <HAL_GPIO_Init+0x2a0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d875      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 80020ea:	4a98      	ldr	r2, [pc, #608]	; (800234c <HAL_GPIO_Init+0x2a4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d058      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
 80020f0:	4a96      	ldr	r2, [pc, #600]	; (800234c <HAL_GPIO_Init+0x2a4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d86f      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 80020f6:	4a96      	ldr	r2, [pc, #600]	; (8002350 <HAL_GPIO_Init+0x2a8>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d052      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
 80020fc:	4a94      	ldr	r2, [pc, #592]	; (8002350 <HAL_GPIO_Init+0x2a8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d869      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 8002102:	4a94      	ldr	r2, [pc, #592]	; (8002354 <HAL_GPIO_Init+0x2ac>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d04c      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
 8002108:	4a92      	ldr	r2, [pc, #584]	; (8002354 <HAL_GPIO_Init+0x2ac>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d863      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 800210e:	4a92      	ldr	r2, [pc, #584]	; (8002358 <HAL_GPIO_Init+0x2b0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d046      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
 8002114:	4a90      	ldr	r2, [pc, #576]	; (8002358 <HAL_GPIO_Init+0x2b0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d85d      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 800211a:	2b12      	cmp	r3, #18
 800211c:	d82a      	bhi.n	8002174 <HAL_GPIO_Init+0xcc>
 800211e:	2b12      	cmp	r3, #18
 8002120:	d859      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 8002122:	a201      	add	r2, pc, #4	; (adr r2, 8002128 <HAL_GPIO_Init+0x80>)
 8002124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002128:	080021a3 	.word	0x080021a3
 800212c:	0800217d 	.word	0x0800217d
 8002130:	0800218f 	.word	0x0800218f
 8002134:	080021d1 	.word	0x080021d1
 8002138:	080021d7 	.word	0x080021d7
 800213c:	080021d7 	.word	0x080021d7
 8002140:	080021d7 	.word	0x080021d7
 8002144:	080021d7 	.word	0x080021d7
 8002148:	080021d7 	.word	0x080021d7
 800214c:	080021d7 	.word	0x080021d7
 8002150:	080021d7 	.word	0x080021d7
 8002154:	080021d7 	.word	0x080021d7
 8002158:	080021d7 	.word	0x080021d7
 800215c:	080021d7 	.word	0x080021d7
 8002160:	080021d7 	.word	0x080021d7
 8002164:	080021d7 	.word	0x080021d7
 8002168:	080021d7 	.word	0x080021d7
 800216c:	08002185 	.word	0x08002185
 8002170:	08002199 	.word	0x08002199
 8002174:	4a79      	ldr	r2, [pc, #484]	; (800235c <HAL_GPIO_Init+0x2b4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d013      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800217a:	e02c      	b.n	80021d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	623b      	str	r3, [r7, #32]
          break;
 8002182:	e029      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	3304      	adds	r3, #4
 800218a:	623b      	str	r3, [r7, #32]
          break;
 800218c:	e024      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	3308      	adds	r3, #8
 8002194:	623b      	str	r3, [r7, #32]
          break;
 8002196:	e01f      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	330c      	adds	r3, #12
 800219e:	623b      	str	r3, [r7, #32]
          break;
 80021a0:	e01a      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d102      	bne.n	80021b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021aa:	2304      	movs	r3, #4
 80021ac:	623b      	str	r3, [r7, #32]
          break;
 80021ae:	e013      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d105      	bne.n	80021c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021b8:	2308      	movs	r3, #8
 80021ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69fa      	ldr	r2, [r7, #28]
 80021c0:	611a      	str	r2, [r3, #16]
          break;
 80021c2:	e009      	b.n	80021d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021c4:	2308      	movs	r3, #8
 80021c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69fa      	ldr	r2, [r7, #28]
 80021cc:	615a      	str	r2, [r3, #20]
          break;
 80021ce:	e003      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021d0:	2300      	movs	r3, #0
 80021d2:	623b      	str	r3, [r7, #32]
          break;
 80021d4:	e000      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          break;
 80021d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	2bff      	cmp	r3, #255	; 0xff
 80021dc:	d801      	bhi.n	80021e2 <HAL_GPIO_Init+0x13a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	e001      	b.n	80021e6 <HAL_GPIO_Init+0x13e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3304      	adds	r3, #4
 80021e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2bff      	cmp	r3, #255	; 0xff
 80021ec:	d802      	bhi.n	80021f4 <HAL_GPIO_Init+0x14c>
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	e002      	b.n	80021fa <HAL_GPIO_Init+0x152>
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	3b08      	subs	r3, #8
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	210f      	movs	r1, #15
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	fa01 f303 	lsl.w	r3, r1, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	401a      	ands	r2, r3
 800220c:	6a39      	ldr	r1, [r7, #32]
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	fa01 f303 	lsl.w	r3, r1, r3
 8002214:	431a      	orrs	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 80b1 	beq.w	800238a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002228:	4b4d      	ldr	r3, [pc, #308]	; (8002360 <HAL_GPIO_Init+0x2b8>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	4a4c      	ldr	r2, [pc, #304]	; (8002360 <HAL_GPIO_Init+0x2b8>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6193      	str	r3, [r2, #24]
 8002234:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <HAL_GPIO_Init+0x2b8>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002240:	4a48      	ldr	r2, [pc, #288]	; (8002364 <HAL_GPIO_Init+0x2bc>)
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	3302      	adds	r3, #2
 8002248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	220f      	movs	r2, #15
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	4013      	ands	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a40      	ldr	r2, [pc, #256]	; (8002368 <HAL_GPIO_Init+0x2c0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d013      	beq.n	8002294 <HAL_GPIO_Init+0x1ec>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a3f      	ldr	r2, [pc, #252]	; (800236c <HAL_GPIO_Init+0x2c4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d00d      	beq.n	8002290 <HAL_GPIO_Init+0x1e8>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a3e      	ldr	r2, [pc, #248]	; (8002370 <HAL_GPIO_Init+0x2c8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d007      	beq.n	800228c <HAL_GPIO_Init+0x1e4>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a3d      	ldr	r2, [pc, #244]	; (8002374 <HAL_GPIO_Init+0x2cc>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d101      	bne.n	8002288 <HAL_GPIO_Init+0x1e0>
 8002284:	2303      	movs	r3, #3
 8002286:	e006      	b.n	8002296 <HAL_GPIO_Init+0x1ee>
 8002288:	2304      	movs	r3, #4
 800228a:	e004      	b.n	8002296 <HAL_GPIO_Init+0x1ee>
 800228c:	2302      	movs	r3, #2
 800228e:	e002      	b.n	8002296 <HAL_GPIO_Init+0x1ee>
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <HAL_GPIO_Init+0x1ee>
 8002294:	2300      	movs	r3, #0
 8002296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002298:	f002 0203 	and.w	r2, r2, #3
 800229c:	0092      	lsls	r2, r2, #2
 800229e:	4093      	lsls	r3, r2
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022a6:	492f      	ldr	r1, [pc, #188]	; (8002364 <HAL_GPIO_Init+0x2bc>)
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	089b      	lsrs	r3, r3, #2
 80022ac:	3302      	adds	r3, #2
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d006      	beq.n	80022ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022c0:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	492c      	ldr	r1, [pc, #176]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	600b      	str	r3, [r1, #0]
 80022cc:	e006      	b.n	80022dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022ce:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	4928      	ldr	r1, [pc, #160]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022d8:	4013      	ands	r3, r2
 80022da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d006      	beq.n	80022f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022e8:	4b23      	ldr	r3, [pc, #140]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	4922      	ldr	r1, [pc, #136]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
 80022f4:	e006      	b.n	8002304 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	491e      	ldr	r1, [pc, #120]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 8002300:	4013      	ands	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d006      	beq.n	800231e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	4918      	ldr	r1, [pc, #96]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	608b      	str	r3, [r1, #8]
 800231c:	e006      	b.n	800232c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	43db      	mvns	r3, r3
 8002326:	4914      	ldr	r1, [pc, #80]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 8002328:	4013      	ands	r3, r2
 800232a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d021      	beq.n	800237c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	490e      	ldr	r1, [pc, #56]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	60cb      	str	r3, [r1, #12]
 8002344:	e021      	b.n	800238a <HAL_GPIO_Init+0x2e2>
 8002346:	bf00      	nop
 8002348:	10320000 	.word	0x10320000
 800234c:	10310000 	.word	0x10310000
 8002350:	10220000 	.word	0x10220000
 8002354:	10210000 	.word	0x10210000
 8002358:	10120000 	.word	0x10120000
 800235c:	10110000 	.word	0x10110000
 8002360:	40021000 	.word	0x40021000
 8002364:	40010000 	.word	0x40010000
 8002368:	40010800 	.word	0x40010800
 800236c:	40010c00 	.word	0x40010c00
 8002370:	40011000 	.word	0x40011000
 8002374:	40011400 	.word	0x40011400
 8002378:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_GPIO_Init+0x304>)
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	43db      	mvns	r3, r3
 8002384:	4909      	ldr	r1, [pc, #36]	; (80023ac <HAL_GPIO_Init+0x304>)
 8002386:	4013      	ands	r3, r2
 8002388:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	3301      	adds	r3, #1
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	fa22 f303 	lsr.w	r3, r2, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	f47f ae8e 	bne.w	80020bc <HAL_GPIO_Init+0x14>
  }
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	372c      	adds	r7, #44	; 0x2c
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	40010400 	.word	0x40010400

080023b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	887b      	ldrh	r3, [r7, #2]
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	e001      	b.n	80023d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ce:	2300      	movs	r3, #0
 80023d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr

080023de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	807b      	strh	r3, [r7, #2]
 80023ea:	4613      	mov	r3, r2
 80023ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023ee:	787b      	ldrb	r3, [r7, #1]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023f4:	887a      	ldrh	r2, [r7, #2]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023fa:	e003      	b.n	8002404 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023fc:	887b      	ldrh	r3, [r7, #2]
 80023fe:	041a      	lsls	r2, r3, #16
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	611a      	str	r2, [r3, #16]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr
	...

08002410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e272      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 8087 	beq.w	800253e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002430:	4b92      	ldr	r3, [pc, #584]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b04      	cmp	r3, #4
 800243a:	d00c      	beq.n	8002456 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800243c:	4b8f      	ldr	r3, [pc, #572]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	2b08      	cmp	r3, #8
 8002446:	d112      	bne.n	800246e <HAL_RCC_OscConfig+0x5e>
 8002448:	4b8c      	ldr	r3, [pc, #560]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002454:	d10b      	bne.n	800246e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002456:	4b89      	ldr	r3, [pc, #548]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d06c      	beq.n	800253c <HAL_RCC_OscConfig+0x12c>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d168      	bne.n	800253c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e24c      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002476:	d106      	bne.n	8002486 <HAL_RCC_OscConfig+0x76>
 8002478:	4b80      	ldr	r3, [pc, #512]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a7f      	ldr	r2, [pc, #508]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800247e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	e02e      	b.n	80024e4 <HAL_RCC_OscConfig+0xd4>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x98>
 800248e:	4b7b      	ldr	r3, [pc, #492]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a7a      	ldr	r2, [pc, #488]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b78      	ldr	r3, [pc, #480]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a77      	ldr	r2, [pc, #476]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e01d      	b.n	80024e4 <HAL_RCC_OscConfig+0xd4>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0xbc>
 80024b2:	4b72      	ldr	r3, [pc, #456]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a71      	ldr	r2, [pc, #452]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4b6f      	ldr	r3, [pc, #444]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a6e      	ldr	r2, [pc, #440]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e00b      	b.n	80024e4 <HAL_RCC_OscConfig+0xd4>
 80024cc:	4b6b      	ldr	r3, [pc, #428]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a6a      	ldr	r2, [pc, #424]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b68      	ldr	r3, [pc, #416]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a67      	ldr	r2, [pc, #412]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe ff98 	bl	8001420 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f4:	f7fe ff94 	bl	8001420 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	; 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e200      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	4b5d      	ldr	r3, [pc, #372]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0xe4>
 8002512:	e014      	b.n	800253e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7fe ff84 	bl	8001420 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800251c:	f7fe ff80 	bl	8001420 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e1ec      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	4b53      	ldr	r3, [pc, #332]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x10c>
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d063      	beq.n	8002612 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800254a:	4b4c      	ldr	r3, [pc, #304]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002556:	4b49      	ldr	r3, [pc, #292]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b08      	cmp	r3, #8
 8002560:	d11c      	bne.n	800259c <HAL_RCC_OscConfig+0x18c>
 8002562:	4b46      	ldr	r3, [pc, #280]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d116      	bne.n	800259c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	4b43      	ldr	r3, [pc, #268]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_RCC_OscConfig+0x176>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e1c0      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4b3d      	ldr	r3, [pc, #244]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4939      	ldr	r1, [pc, #228]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	e03a      	b.n	8002612 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7fe ff39 	bl	8001420 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b2:	f7fe ff35 	bl	8001420 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e1a1      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	4b2d      	ldr	r3, [pc, #180]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b2a      	ldr	r3, [pc, #168]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4927      	ldr	r1, [pc, #156]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
 80025e4:	e015      	b.n	8002612 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e6:	4b26      	ldr	r3, [pc, #152]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7fe ff18 	bl	8001420 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f4:	f7fe ff14 	bl	8001420 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e180      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	4b1d      	ldr	r3, [pc, #116]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d03a      	beq.n	8002694 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d019      	beq.n	800265a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <HAL_RCC_OscConfig+0x274>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262c:	f7fe fef8 	bl	8001420 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002634:	f7fe fef4 	bl	8001420 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e160      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	4b0d      	ldr	r3, [pc, #52]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002652:	2001      	movs	r0, #1
 8002654:	f000 fad8 	bl	8002c08 <RCC_Delay>
 8002658:	e01c      	b.n	8002694 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800265a:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <HAL_RCC_OscConfig+0x274>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002660:	f7fe fede 	bl	8001420 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002666:	e00f      	b.n	8002688 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002668:	f7fe feda 	bl	8001420 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d908      	bls.n	8002688 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e146      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
 8002680:	42420000 	.word	0x42420000
 8002684:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002688:	4b92      	ldr	r3, [pc, #584]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1e9      	bne.n	8002668 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80a6 	beq.w	80027ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a6:	4b8b      	ldr	r3, [pc, #556]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10d      	bne.n	80026ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b2:	4b88      	ldr	r3, [pc, #544]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	4a87      	ldr	r2, [pc, #540]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026bc:	61d3      	str	r3, [r2, #28]
 80026be:	4b85      	ldr	r3, [pc, #532]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ca:	2301      	movs	r3, #1
 80026cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ce:	4b82      	ldr	r3, [pc, #520]	; (80028d8 <HAL_RCC_OscConfig+0x4c8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d118      	bne.n	800270c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026da:	4b7f      	ldr	r3, [pc, #508]	; (80028d8 <HAL_RCC_OscConfig+0x4c8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a7e      	ldr	r2, [pc, #504]	; (80028d8 <HAL_RCC_OscConfig+0x4c8>)
 80026e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e6:	f7fe fe9b 	bl	8001420 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ee:	f7fe fe97 	bl	8001420 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b64      	cmp	r3, #100	; 0x64
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e103      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002700:	4b75      	ldr	r3, [pc, #468]	; (80028d8 <HAL_RCC_OscConfig+0x4c8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d106      	bne.n	8002722 <HAL_RCC_OscConfig+0x312>
 8002714:	4b6f      	ldr	r3, [pc, #444]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	4a6e      	ldr	r2, [pc, #440]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6213      	str	r3, [r2, #32]
 8002720:	e02d      	b.n	800277e <HAL_RCC_OscConfig+0x36e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10c      	bne.n	8002744 <HAL_RCC_OscConfig+0x334>
 800272a:	4b6a      	ldr	r3, [pc, #424]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4a69      	ldr	r2, [pc, #420]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	6213      	str	r3, [r2, #32]
 8002736:	4b67      	ldr	r3, [pc, #412]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4a66      	ldr	r2, [pc, #408]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800273c:	f023 0304 	bic.w	r3, r3, #4
 8002740:	6213      	str	r3, [r2, #32]
 8002742:	e01c      	b.n	800277e <HAL_RCC_OscConfig+0x36e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2b05      	cmp	r3, #5
 800274a:	d10c      	bne.n	8002766 <HAL_RCC_OscConfig+0x356>
 800274c:	4b61      	ldr	r3, [pc, #388]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	4a60      	ldr	r2, [pc, #384]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002752:	f043 0304 	orr.w	r3, r3, #4
 8002756:	6213      	str	r3, [r2, #32]
 8002758:	4b5e      	ldr	r3, [pc, #376]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	4a5d      	ldr	r2, [pc, #372]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6213      	str	r3, [r2, #32]
 8002764:	e00b      	b.n	800277e <HAL_RCC_OscConfig+0x36e>
 8002766:	4b5b      	ldr	r3, [pc, #364]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4a5a      	ldr	r2, [pc, #360]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800276c:	f023 0301 	bic.w	r3, r3, #1
 8002770:	6213      	str	r3, [r2, #32]
 8002772:	4b58      	ldr	r3, [pc, #352]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	4a57      	ldr	r2, [pc, #348]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	f023 0304 	bic.w	r3, r3, #4
 800277c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d015      	beq.n	80027b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002786:	f7fe fe4b 	bl	8001420 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278c:	e00a      	b.n	80027a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7fe fe47 	bl	8001420 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	; 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e0b1      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a4:	4b4b      	ldr	r3, [pc, #300]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0ee      	beq.n	800278e <HAL_RCC_OscConfig+0x37e>
 80027b0:	e014      	b.n	80027dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b2:	f7fe fe35 	bl	8001420 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ba:	f7fe fe31 	bl	8001420 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e09b      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d0:	4b40      	ldr	r3, [pc, #256]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1ee      	bne.n	80027ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d105      	bne.n	80027ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e2:	4b3c      	ldr	r3, [pc, #240]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	4a3b      	ldr	r2, [pc, #236]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8087 	beq.w	8002906 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f8:	4b36      	ldr	r3, [pc, #216]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b08      	cmp	r3, #8
 8002802:	d061      	beq.n	80028c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d146      	bne.n	800289a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280c:	4b33      	ldr	r3, [pc, #204]	; (80028dc <HAL_RCC_OscConfig+0x4cc>)
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002812:	f7fe fe05 	bl	8001420 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281a:	f7fe fe01 	bl	8001420 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e06d      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800282c:	4b29      	ldr	r3, [pc, #164]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f0      	bne.n	800281a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002840:	d108      	bne.n	8002854 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002842:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	4921      	ldr	r1, [pc, #132]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002854:	4b1f      	ldr	r3, [pc, #124]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a19      	ldr	r1, [r3, #32]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	430b      	orrs	r3, r1
 8002866:	491b      	ldr	r1, [pc, #108]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <HAL_RCC_OscConfig+0x4cc>)
 800286e:	2201      	movs	r2, #1
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002872:	f7fe fdd5 	bl	8001420 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287a:	f7fe fdd1 	bl	8001420 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e03d      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800288c:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x46a>
 8002898:	e035      	b.n	8002906 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	4b10      	ldr	r3, [pc, #64]	; (80028dc <HAL_RCC_OscConfig+0x4cc>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7fe fdbe 	bl	8001420 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe fdba 	bl	8001420 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e026      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x498>
 80028c6:	e01e      	b.n	8002906 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d107      	bne.n	80028e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e019      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40007000 	.word	0x40007000
 80028dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_RCC_OscConfig+0x500>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d106      	bne.n	8002902 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fe:	429a      	cmp	r2, r3
 8002900:	d001      	beq.n	8002906 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40021000 	.word	0x40021000

08002914 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0d0      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002928:	4b6a      	ldr	r3, [pc, #424]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d910      	bls.n	8002958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b67      	ldr	r3, [pc, #412]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 0207 	bic.w	r2, r3, #7
 800293e:	4965      	ldr	r1, [pc, #404]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002946:	4b63      	ldr	r3, [pc, #396]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d001      	beq.n	8002958 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0b8      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d020      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002970:	4b59      	ldr	r3, [pc, #356]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4a58      	ldr	r2, [pc, #352]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800297a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002988:	4b53      	ldr	r3, [pc, #332]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4a52      	ldr	r2, [pc, #328]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002992:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002994:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	494d      	ldr	r1, [pc, #308]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d040      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d107      	bne.n	80029ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d115      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e07f      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d2:	4b41      	ldr	r3, [pc, #260]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e073      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e2:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e06b      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f2:	4b39      	ldr	r3, [pc, #228]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f023 0203 	bic.w	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4936      	ldr	r1, [pc, #216]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a04:	f7fe fd0c 	bl	8001420 <HAL_GetTick>
 8002a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a0c:	f7fe fd08 	bl	8001420 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e053      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a22:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 020c 	and.w	r2, r3, #12
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d1eb      	bne.n	8002a0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a34:	4b27      	ldr	r3, [pc, #156]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d210      	bcs.n	8002a64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b24      	ldr	r3, [pc, #144]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 0207 	bic.w	r2, r3, #7
 8002a4a:	4922      	ldr	r1, [pc, #136]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e032      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a70:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4916      	ldr	r1, [pc, #88]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a8e:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	490e      	ldr	r1, [pc, #56]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aa2:	f000 f821 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	490a      	ldr	r1, [pc, #40]	; (8002adc <HAL_RCC_ClockConfig+0x1c8>)
 8002ab4:	5ccb      	ldrb	r3, [r1, r3]
 8002ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aba:	4a09      	ldr	r2, [pc, #36]	; (8002ae0 <HAL_RCC_ClockConfig+0x1cc>)
 8002abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe fc6a 	bl	800139c <HAL_InitTick>

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40022000 	.word	0x40022000
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	08004374 	.word	0x08004374
 8002ae0:	20000000 	.word	0x20000000
 8002ae4:	20000004 	.word	0x20000004

08002ae8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae8:	b490      	push	{r4, r7}
 8002aea:	b08a      	sub	sp, #40	; 0x28
 8002aec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002aee:	4b29      	ldr	r3, [pc, #164]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xac>)
 8002af0:	1d3c      	adds	r4, r7, #4
 8002af2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002af4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002af8:	f240 2301 	movw	r3, #513	; 0x201
 8002afc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	2300      	movs	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
 8002b06:	2300      	movs	r3, #0
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b12:	4b21      	ldr	r3, [pc, #132]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d002      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x40>
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d003      	beq.n	8002b2e <HAL_RCC_GetSysClockFreq+0x46>
 8002b26:	e02b      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b28:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b2a:	623b      	str	r3, [r7, #32]
      break;
 8002b2c:	e02b      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	0c9b      	lsrs	r3, r3, #18
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	3328      	adds	r3, #40	; 0x28
 8002b38:	443b      	add	r3, r7
 8002b3a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b3e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d012      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b4a:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	0c5b      	lsrs	r3, r3, #17
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	3328      	adds	r3, #40	; 0x28
 8002b56:	443b      	add	r3, r7
 8002b58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	4a0e      	ldr	r2, [pc, #56]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b62:	fb03 f202 	mul.w	r2, r3, r2
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6e:	e004      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	4a0b      	ldr	r2, [pc, #44]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b74:	fb02 f303 	mul.w	r3, r2, r3
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	623b      	str	r3, [r7, #32]
      break;
 8002b7e:	e002      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b82:	623b      	str	r3, [r7, #32]
      break;
 8002b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b86:	6a3b      	ldr	r3, [r7, #32]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3728      	adds	r7, #40	; 0x28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc90      	pop	{r4, r7}
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	08004354 	.word	0x08004354
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	007a1200 	.word	0x007a1200
 8002ba0:	003d0900 	.word	0x003d0900

08002ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba8:	4b02      	ldr	r3, [pc, #8]	; (8002bb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002baa:	681b      	ldr	r3, [r3, #0]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr
 8002bb4:	20000000 	.word	0x20000000

08002bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bbc:	f7ff fff2 	bl	8002ba4 <HAL_RCC_GetHCLKFreq>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	4903      	ldr	r1, [pc, #12]	; (8002bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bce:	5ccb      	ldrb	r3, [r1, r3]
 8002bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	08004384 	.word	0x08004384

08002be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002be4:	f7ff ffde 	bl	8002ba4 <HAL_RCC_GetHCLKFreq>
 8002be8:	4602      	mov	r2, r0
 8002bea:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	0adb      	lsrs	r3, r3, #11
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	4903      	ldr	r1, [pc, #12]	; (8002c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bf6:	5ccb      	ldrb	r3, [r1, r3]
 8002bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000
 8002c04:	08004384 	.word	0x08004384

08002c08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c10:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <RCC_Delay+0x34>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <RCC_Delay+0x38>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	0a5b      	lsrs	r3, r3, #9
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	fb02 f303 	mul.w	r3, r2, r3
 8002c22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c24:	bf00      	nop
  }
  while (Delay --);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1e5a      	subs	r2, r3, #1
 8002c2a:	60fa      	str	r2, [r7, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f9      	bne.n	8002c24 <RCC_Delay+0x1c>
}
 8002c30:	bf00      	nop
 8002c32:	bf00      	nop
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	10624dd3 	.word	0x10624dd3

08002c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d07d      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c60:	2300      	movs	r3, #0
 8002c62:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c64:	4b4f      	ldr	r3, [pc, #316]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10d      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c70:	4b4c      	ldr	r3, [pc, #304]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	4a4b      	ldr	r2, [pc, #300]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	61d3      	str	r3, [r2, #28]
 8002c7c:	4b49      	ldr	r3, [pc, #292]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8c:	4b46      	ldr	r3, [pc, #280]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d118      	bne.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c98:	4b43      	ldr	r3, [pc, #268]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a42      	ldr	r2, [pc, #264]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca4:	f7fe fbbc 	bl	8001420 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002caa:	e008      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cac:	f7fe fbb8 	bl	8001420 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	; 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e06d      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbe:	4b3a      	ldr	r3, [pc, #232]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cca:	4b36      	ldr	r3, [pc, #216]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d02e      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d027      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ce8:	4b2e      	ldr	r3, [pc, #184]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cf2:	4b2e      	ldr	r3, [pc, #184]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cf8:	4b2c      	ldr	r3, [pc, #176]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cfe:	4a29      	ldr	r2, [pc, #164]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d014      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0e:	f7fe fb87 	bl	8001420 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d14:	e00a      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d16:	f7fe fb83 	bl	8001420 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e036      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2c:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ee      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d38:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	4917      	ldr	r1, [pc, #92]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d4a:	7dfb      	ldrb	r3, [r7, #23]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d105      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d50:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	4a13      	ldr	r2, [pc, #76]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d68:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	490b      	ldr	r1, [pc, #44]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d008      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d86:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	4904      	ldr	r1, [pc, #16]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40007000 	.word	0x40007000
 8002dac:	42420440 	.word	0x42420440

08002db0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002db0:	b590      	push	{r4, r7, lr}
 8002db2:	b08d      	sub	sp, #52	; 0x34
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002db8:	4b58      	ldr	r3, [pc, #352]	; (8002f1c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002dba:	f107 040c 	add.w	r4, r7, #12
 8002dbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002dc4:	f240 2301 	movw	r3, #513	; 0x201
 8002dc8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dce:	2300      	movs	r3, #0
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b10      	cmp	r3, #16
 8002de2:	d00a      	beq.n	8002dfa <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b10      	cmp	r3, #16
 8002de8:	f200 808e 	bhi.w	8002f08 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d049      	beq.n	8002e86 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d079      	beq.n	8002eec <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002df8:	e086      	b.n	8002f08 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002dfa:	4b49      	ldr	r3, [pc, #292]	; (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002e00:	4b47      	ldr	r3, [pc, #284]	; (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d07f      	beq.n	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	0c9b      	lsrs	r3, r3, #18
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	3330      	adds	r3, #48	; 0x30
 8002e16:	443b      	add	r3, r7
 8002e18:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e1c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d017      	beq.n	8002e58 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e28:	4b3d      	ldr	r3, [pc, #244]	; (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	0c5b      	lsrs	r3, r3, #17
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	3330      	adds	r3, #48	; 0x30
 8002e34:	443b      	add	r3, r7
 8002e36:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00d      	beq.n	8002e62 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e46:	4a37      	ldr	r2, [pc, #220]	; (8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	fb02 f303 	mul.w	r3, r2, r3
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e56:	e004      	b.n	8002e62 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	4a33      	ldr	r2, [pc, #204]	; (8002f28 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002e5c:	fb02 f303 	mul.w	r3, r2, r3
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e62:	4b2f      	ldr	r3, [pc, #188]	; (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e6e:	d102      	bne.n	8002e76 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e72:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e74:	e04a      	b.n	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4a2c      	ldr	r2, [pc, #176]	; (8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e80:	085b      	lsrs	r3, r3, #1
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e84:	e042      	b.n	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002e86:	4b26      	ldr	r3, [pc, #152]	; (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e96:	d108      	bne.n	8002eaa <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ea8:	e01f      	b.n	8002eea <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb4:	d109      	bne.n	8002eca <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8002eb6:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002ec2:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002ec6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ec8:	e00f      	b.n	8002eea <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ed4:	d11c      	bne.n	8002f10 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002ed6:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d016      	beq.n	8002f10 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002ee2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002ee6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ee8:	e012      	b.n	8002f10 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002eea:	e011      	b.n	8002f10 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002eec:	f7ff fe78 	bl	8002be0 <HAL_RCC_GetPCLK2Freq>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	0b9b      	lsrs	r3, r3, #14
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	3301      	adds	r3, #1
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f06:	e004      	b.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002f08:	bf00      	nop
 8002f0a:	e002      	b.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002f0c:	bf00      	nop
 8002f0e:	e000      	b.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002f10:	bf00      	nop
    }
  }
  return (frequency);
 8002f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3734      	adds	r7, #52	; 0x34
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd90      	pop	{r4, r7, pc}
 8002f1c:	08004364 	.word	0x08004364
 8002f20:	40021000 	.word	0x40021000
 8002f24:	007a1200 	.word	0x007a1200
 8002f28:	003d0900 	.word	0x003d0900
 8002f2c:	aaaaaaab 	.word	0xaaaaaaab

08002f30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e03f      	b.n	8002fc2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fe f924 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2224      	movs	r2, #36	; 0x24
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fc8f 	bl	8003898 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695a      	ldr	r2, [r3, #20]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fa8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b08a      	sub	sp, #40	; 0x28
 8002fce:	af02      	add	r7, sp, #8
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	603b      	str	r3, [r7, #0]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d17c      	bne.n	80030e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <HAL_UART_Transmit+0x2c>
 8002ff0:	88fb      	ldrh	r3, [r7, #6]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e075      	b.n	80030e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_UART_Transmit+0x3e>
 8003004:	2302      	movs	r3, #2
 8003006:	e06e      	b.n	80030e6 <HAL_UART_Transmit+0x11c>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2221      	movs	r2, #33	; 0x21
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800301e:	f7fe f9ff 	bl	8001420 <HAL_GetTick>
 8003022:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	88fa      	ldrh	r2, [r7, #6]
 8003028:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	88fa      	ldrh	r2, [r7, #6]
 800302e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003038:	d108      	bne.n	800304c <HAL_UART_Transmit+0x82>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d104      	bne.n	800304c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	61bb      	str	r3, [r7, #24]
 800304a:	e003      	b.n	8003054 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003050:	2300      	movs	r3, #0
 8003052:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800305c:	e02a      	b.n	80030b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2200      	movs	r2, #0
 8003066:	2180      	movs	r1, #128	; 0x80
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 fa41 	bl	80034f0 <UART_WaitOnFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e036      	b.n	80030e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10b      	bne.n	8003096 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800308c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	3302      	adds	r3, #2
 8003092:	61bb      	str	r3, [r7, #24]
 8003094:	e007      	b.n	80030a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	781a      	ldrb	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	3301      	adds	r3, #1
 80030a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1cf      	bne.n	800305e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2200      	movs	r2, #0
 80030c6:	2140      	movs	r1, #64	; 0x40
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 fa11 	bl	80034f0 <UART_WaitOnFlagUntilTimeout>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e006      	b.n	80030e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	e000      	b.n	80030e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030e4:	2302      	movs	r3, #2
  }
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3720      	adds	r7, #32
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b084      	sub	sp, #16
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	4613      	mov	r3, r2
 80030fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b20      	cmp	r3, #32
 8003106:	d11d      	bne.n	8003144 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <HAL_UART_Receive_IT+0x26>
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e016      	b.n	8003146 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_UART_Receive_IT+0x38>
 8003122:	2302      	movs	r3, #2
 8003124:	e00f      	b.n	8003146 <HAL_UART_Receive_IT+0x58>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	461a      	mov	r2, r3
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fa22 	bl	8003584 <UART_Start_Receive_IT>
 8003140:	4603      	mov	r3, r0
 8003142:	e000      	b.n	8003146 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003144:	2302      	movs	r3, #2
  }
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	; 0x28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003170:	2300      	movs	r3, #0
 8003172:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10d      	bne.n	80031a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_UART_IRQHandler+0x52>
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fad2 	bl	8003744 <UART_Receive_IT>
      return;
 80031a0:	e17b      	b.n	800349a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80b1 	beq.w	800330c <HAL_UART_IRQHandler+0x1bc>
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d105      	bne.n	80031c0 <HAL_UART_IRQHandler+0x70>
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 80a6 	beq.w	800330c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <HAL_UART_IRQHandler+0x90>
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	f043 0201 	orr.w	r2, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_UART_IRQHandler+0xb0>
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	f043 0202 	orr.w	r2, r3, #2
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <HAL_UART_IRQHandler+0xd0>
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	f043 0204 	orr.w	r2, r3, #4
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00f      	beq.n	800324a <HAL_UART_IRQHandler+0xfa>
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b00      	cmp	r3, #0
 8003232:	d104      	bne.n	800323e <HAL_UART_IRQHandler+0xee>
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f043 0208 	orr.w	r2, r3, #8
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 811e 	beq.w	8003490 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	f003 0320 	and.w	r3, r3, #32
 800325a:	2b00      	cmp	r3, #0
 800325c:	d007      	beq.n	800326e <HAL_UART_IRQHandler+0x11e>
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 fa6b 	bl	8003744 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003278:	2b00      	cmp	r3, #0
 800327a:	bf14      	ite	ne
 800327c:	2301      	movne	r3, #1
 800327e:	2300      	moveq	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d102      	bne.n	8003296 <HAL_UART_IRQHandler+0x146>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d031      	beq.n	80032fa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f9ad 	bl	80035f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d023      	beq.n	80032f2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d013      	beq.n	80032ea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	4a76      	ldr	r2, [pc, #472]	; (80034a0 <HAL_UART_IRQHandler+0x350>)
 80032c8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fe fe74 	bl	8001fbc <HAL_DMA_Abort_IT>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d016      	beq.n	8003308 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032e4:	4610      	mov	r0, r2
 80032e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e8:	e00e      	b.n	8003308 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f8ec 	bl	80034c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f0:	e00a      	b.n	8003308 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f8e8 	bl	80034c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f8:	e006      	b.n	8003308 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f8e4 	bl	80034c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003306:	e0c3      	b.n	8003490 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003308:	bf00      	nop
    return;
 800330a:	e0c1      	b.n	8003490 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	2b01      	cmp	r3, #1
 8003312:	f040 80a1 	bne.w	8003458 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 809b 	beq.w	8003458 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	f003 0310 	and.w	r3, r3, #16
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 8095 	beq.w	8003458 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	d04e      	beq.n	80033f0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800335c:	8a3b      	ldrh	r3, [r7, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 8098 	beq.w	8003494 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003368:	8a3a      	ldrh	r2, [r7, #16]
 800336a:	429a      	cmp	r2, r3
 800336c:	f080 8092 	bcs.w	8003494 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8a3a      	ldrh	r2, [r7, #16]
 8003374:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	2b20      	cmp	r3, #32
 800337e:	d02b      	beq.n	80033d8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800338e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695a      	ldr	r2, [r3, #20]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ae:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0210 	bic.w	r2, r2, #16
 80033cc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe fdb7 	bl	8001f46 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	4619      	mov	r1, r3
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f876 	bl	80034da <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80033ee:	e051      	b.n	8003494 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d047      	beq.n	8003498 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003408:	8a7b      	ldrh	r3, [r7, #18]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d044      	beq.n	8003498 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800341c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695a      	ldr	r2, [r3, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0201 	bic.w	r2, r2, #1
 800342c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0210 	bic.w	r2, r2, #16
 800344a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800344c:	8a7b      	ldrh	r3, [r7, #18]
 800344e:	4619      	mov	r1, r3
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f842 	bl	80034da <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003456:	e01f      	b.n	8003498 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345e:	2b00      	cmp	r3, #0
 8003460:	d008      	beq.n	8003474 <HAL_UART_IRQHandler+0x324>
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f902 	bl	8003676 <UART_Transmit_IT>
    return;
 8003472:	e012      	b.n	800349a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00d      	beq.n	800349a <HAL_UART_IRQHandler+0x34a>
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f943 	bl	8003714 <UART_EndTransmit_IT>
    return;
 800348e:	e004      	b.n	800349a <HAL_UART_IRQHandler+0x34a>
    return;
 8003490:	bf00      	nop
 8003492:	e002      	b.n	800349a <HAL_UART_IRQHandler+0x34a>
      return;
 8003494:	bf00      	nop
 8003496:	e000      	b.n	800349a <HAL_UART_IRQHandler+0x34a>
      return;
 8003498:	bf00      	nop
  }
}
 800349a:	3728      	adds	r7, #40	; 0x28
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	0800364f 	.word	0x0800364f

080034a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr

080034c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr

080034da <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	460b      	mov	r3, r1
 80034e4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	4613      	mov	r3, r2
 80034fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003500:	e02c      	b.n	800355c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003508:	d028      	beq.n	800355c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d007      	beq.n	8003520 <UART_WaitOnFlagUntilTimeout+0x30>
 8003510:	f7fd ff86 	bl	8001420 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	429a      	cmp	r2, r3
 800351e:	d21d      	bcs.n	800355c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800352e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0201 	bic.w	r2, r2, #1
 800353e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e00f      	b.n	800357c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4013      	ands	r3, r2
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	429a      	cmp	r2, r3
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	429a      	cmp	r2, r3
 8003578:	d0c3      	beq.n	8003502 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	4613      	mov	r3, r2
 8003590:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	88fa      	ldrh	r2, [r7, #6]
 800359c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	88fa      	ldrh	r2, [r7, #6]
 80035a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2222      	movs	r2, #34	; 0x22
 80035ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035c8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 0201 	orr.w	r2, r2, #1
 80035d8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0220 	orr.w	r2, r2, #32
 80035e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr

080035f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800360c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695a      	ldr	r2, [r3, #20]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0201 	bic.w	r2, r2, #1
 800361c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	2b01      	cmp	r3, #1
 8003624:	d107      	bne.n	8003636 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0210 	bic.w	r2, r2, #16
 8003634:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr

0800364e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f7ff ff2d 	bl	80034c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800366e:	bf00      	nop
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003676:	b480      	push	{r7}
 8003678:	b085      	sub	sp, #20
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b21      	cmp	r3, #33	; 0x21
 8003688:	d13e      	bne.n	8003708 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003692:	d114      	bne.n	80036be <UART_Transmit_IT+0x48>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d110      	bne.n	80036be <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	1c9a      	adds	r2, r3, #2
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	621a      	str	r2, [r3, #32]
 80036bc:	e008      	b.n	80036d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	1c59      	adds	r1, r3, #1
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6211      	str	r1, [r2, #32]
 80036c8:	781a      	ldrb	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29b      	uxth	r3, r3
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	4619      	mov	r1, r3
 80036de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10f      	bne.n	8003704 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003702:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	e000      	b.n	800370a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003708:	2302      	movs	r3, #2
  }
}
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr

08003714 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800372a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff feb5 	bl	80034a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b22      	cmp	r3, #34	; 0x22
 8003756:	f040 8099 	bne.w	800388c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003762:	d117      	bne.n	8003794 <UART_Receive_IT+0x50>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d113      	bne.n	8003794 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003774:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	b29b      	uxth	r3, r3
 800377e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003782:	b29a      	uxth	r2, r3
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	1c9a      	adds	r2, r3, #2
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	629a      	str	r2, [r3, #40]	; 0x28
 8003792:	e026      	b.n	80037e2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003798:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a6:	d007      	beq.n	80037b8 <UART_Receive_IT+0x74>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <UART_Receive_IT+0x82>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d106      	bne.n	80037c6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	701a      	strb	r2, [r3, #0]
 80037c4:	e008      	b.n	80037d8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	4619      	mov	r1, r3
 80037f0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d148      	bne.n	8003888 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0220 	bic.w	r2, r2, #32
 8003804:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003814:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0201 	bic.w	r2, r2, #1
 8003824:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	2b01      	cmp	r3, #1
 8003834:	d123      	bne.n	800387e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0210 	bic.w	r2, r2, #16
 800384a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2b10      	cmp	r3, #16
 8003858:	d10a      	bne.n	8003870 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003874:	4619      	mov	r1, r3
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff fe2f 	bl	80034da <HAL_UARTEx_RxEventCallback>
 800387c:	e002      	b.n	8003884 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff fe19 	bl	80034b6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	e002      	b.n	800388e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	e000      	b.n	800388e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800388c:	2302      	movs	r3, #2
  }
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038d2:	f023 030c 	bic.w	r3, r3, #12
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6812      	ldr	r2, [r2, #0]
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	430b      	orrs	r3, r1
 80038de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699a      	ldr	r2, [r3, #24]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a2c      	ldr	r2, [pc, #176]	; (80039ac <UART_SetConfig+0x114>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d103      	bne.n	8003908 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003900:	f7ff f96e 	bl	8002be0 <HAL_RCC_GetPCLK2Freq>
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	e002      	b.n	800390e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003908:	f7ff f956 	bl	8002bb8 <HAL_RCC_GetPCLK1Freq>
 800390c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	009a      	lsls	r2, r3, #2
 8003918:	441a      	add	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	fbb2 f3f3 	udiv	r3, r2, r3
 8003924:	4a22      	ldr	r2, [pc, #136]	; (80039b0 <UART_SetConfig+0x118>)
 8003926:	fba2 2303 	umull	r2, r3, r2, r3
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	0119      	lsls	r1, r3, #4
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	009a      	lsls	r2, r3, #2
 8003938:	441a      	add	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	fbb2 f2f3 	udiv	r2, r2, r3
 8003944:	4b1a      	ldr	r3, [pc, #104]	; (80039b0 <UART_SetConfig+0x118>)
 8003946:	fba3 0302 	umull	r0, r3, r3, r2
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2064      	movs	r0, #100	; 0x64
 800394e:	fb00 f303 	mul.w	r3, r0, r3
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	3332      	adds	r3, #50	; 0x32
 8003958:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <UART_SetConfig+0x118>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003964:	4419      	add	r1, r3
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	009a      	lsls	r2, r3, #2
 8003970:	441a      	add	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	fbb2 f2f3 	udiv	r2, r2, r3
 800397c:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <UART_SetConfig+0x118>)
 800397e:	fba3 0302 	umull	r0, r3, r3, r2
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	2064      	movs	r0, #100	; 0x64
 8003986:	fb00 f303 	mul.w	r3, r0, r3
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	3332      	adds	r3, #50	; 0x32
 8003990:	4a07      	ldr	r2, [pc, #28]	; (80039b0 <UART_SetConfig+0x118>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	f003 020f 	and.w	r2, r3, #15
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	440a      	add	r2, r1
 80039a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40013800 	.word	0x40013800
 80039b0:	51eb851f 	.word	0x51eb851f

080039b4 <__errno>:
 80039b4:	4b01      	ldr	r3, [pc, #4]	; (80039bc <__errno+0x8>)
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	2000000c 	.word	0x2000000c

080039c0 <__libc_init_array>:
 80039c0:	b570      	push	{r4, r5, r6, lr}
 80039c2:	2600      	movs	r6, #0
 80039c4:	4d0c      	ldr	r5, [pc, #48]	; (80039f8 <__libc_init_array+0x38>)
 80039c6:	4c0d      	ldr	r4, [pc, #52]	; (80039fc <__libc_init_array+0x3c>)
 80039c8:	1b64      	subs	r4, r4, r5
 80039ca:	10a4      	asrs	r4, r4, #2
 80039cc:	42a6      	cmp	r6, r4
 80039ce:	d109      	bne.n	80039e4 <__libc_init_array+0x24>
 80039d0:	f000 fc9c 	bl	800430c <_init>
 80039d4:	2600      	movs	r6, #0
 80039d6:	4d0a      	ldr	r5, [pc, #40]	; (8003a00 <__libc_init_array+0x40>)
 80039d8:	4c0a      	ldr	r4, [pc, #40]	; (8003a04 <__libc_init_array+0x44>)
 80039da:	1b64      	subs	r4, r4, r5
 80039dc:	10a4      	asrs	r4, r4, #2
 80039de:	42a6      	cmp	r6, r4
 80039e0:	d105      	bne.n	80039ee <__libc_init_array+0x2e>
 80039e2:	bd70      	pop	{r4, r5, r6, pc}
 80039e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e8:	4798      	blx	r3
 80039ea:	3601      	adds	r6, #1
 80039ec:	e7ee      	b.n	80039cc <__libc_init_array+0xc>
 80039ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f2:	4798      	blx	r3
 80039f4:	3601      	adds	r6, #1
 80039f6:	e7f2      	b.n	80039de <__libc_init_array+0x1e>
 80039f8:	080043c0 	.word	0x080043c0
 80039fc:	080043c0 	.word	0x080043c0
 8003a00:	080043c0 	.word	0x080043c0
 8003a04:	080043c4 	.word	0x080043c4

08003a08 <memset>:
 8003a08:	4603      	mov	r3, r0
 8003a0a:	4402      	add	r2, r0
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d100      	bne.n	8003a12 <memset+0xa>
 8003a10:	4770      	bx	lr
 8003a12:	f803 1b01 	strb.w	r1, [r3], #1
 8003a16:	e7f9      	b.n	8003a0c <memset+0x4>

08003a18 <siprintf>:
 8003a18:	b40e      	push	{r1, r2, r3}
 8003a1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a1e:	b500      	push	{lr}
 8003a20:	b09c      	sub	sp, #112	; 0x70
 8003a22:	ab1d      	add	r3, sp, #116	; 0x74
 8003a24:	9002      	str	r0, [sp, #8]
 8003a26:	9006      	str	r0, [sp, #24]
 8003a28:	9107      	str	r1, [sp, #28]
 8003a2a:	9104      	str	r1, [sp, #16]
 8003a2c:	4808      	ldr	r0, [pc, #32]	; (8003a50 <siprintf+0x38>)
 8003a2e:	4909      	ldr	r1, [pc, #36]	; (8003a54 <siprintf+0x3c>)
 8003a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a34:	9105      	str	r1, [sp, #20]
 8003a36:	6800      	ldr	r0, [r0, #0]
 8003a38:	a902      	add	r1, sp, #8
 8003a3a:	9301      	str	r3, [sp, #4]
 8003a3c:	f000 f868 	bl	8003b10 <_svfiprintf_r>
 8003a40:	2200      	movs	r2, #0
 8003a42:	9b02      	ldr	r3, [sp, #8]
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	b01c      	add	sp, #112	; 0x70
 8003a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a4c:	b003      	add	sp, #12
 8003a4e:	4770      	bx	lr
 8003a50:	2000000c 	.word	0x2000000c
 8003a54:	ffff0208 	.word	0xffff0208

08003a58 <__ssputs_r>:
 8003a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a5c:	688e      	ldr	r6, [r1, #8]
 8003a5e:	4682      	mov	sl, r0
 8003a60:	429e      	cmp	r6, r3
 8003a62:	460c      	mov	r4, r1
 8003a64:	4690      	mov	r8, r2
 8003a66:	461f      	mov	r7, r3
 8003a68:	d838      	bhi.n	8003adc <__ssputs_r+0x84>
 8003a6a:	898a      	ldrh	r2, [r1, #12]
 8003a6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a70:	d032      	beq.n	8003ad8 <__ssputs_r+0x80>
 8003a72:	6825      	ldr	r5, [r4, #0]
 8003a74:	6909      	ldr	r1, [r1, #16]
 8003a76:	3301      	adds	r3, #1
 8003a78:	eba5 0901 	sub.w	r9, r5, r1
 8003a7c:	6965      	ldr	r5, [r4, #20]
 8003a7e:	444b      	add	r3, r9
 8003a80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a88:	106d      	asrs	r5, r5, #1
 8003a8a:	429d      	cmp	r5, r3
 8003a8c:	bf38      	it	cc
 8003a8e:	461d      	movcc	r5, r3
 8003a90:	0553      	lsls	r3, r2, #21
 8003a92:	d531      	bpl.n	8003af8 <__ssputs_r+0xa0>
 8003a94:	4629      	mov	r1, r5
 8003a96:	f000 fb6f 	bl	8004178 <_malloc_r>
 8003a9a:	4606      	mov	r6, r0
 8003a9c:	b950      	cbnz	r0, 8003ab4 <__ssputs_r+0x5c>
 8003a9e:	230c      	movs	r3, #12
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa4:	f8ca 3000 	str.w	r3, [sl]
 8003aa8:	89a3      	ldrh	r3, [r4, #12]
 8003aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aae:	81a3      	strh	r3, [r4, #12]
 8003ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab4:	464a      	mov	r2, r9
 8003ab6:	6921      	ldr	r1, [r4, #16]
 8003ab8:	f000 face 	bl	8004058 <memcpy>
 8003abc:	89a3      	ldrh	r3, [r4, #12]
 8003abe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ac6:	81a3      	strh	r3, [r4, #12]
 8003ac8:	6126      	str	r6, [r4, #16]
 8003aca:	444e      	add	r6, r9
 8003acc:	6026      	str	r6, [r4, #0]
 8003ace:	463e      	mov	r6, r7
 8003ad0:	6165      	str	r5, [r4, #20]
 8003ad2:	eba5 0509 	sub.w	r5, r5, r9
 8003ad6:	60a5      	str	r5, [r4, #8]
 8003ad8:	42be      	cmp	r6, r7
 8003ada:	d900      	bls.n	8003ade <__ssputs_r+0x86>
 8003adc:	463e      	mov	r6, r7
 8003ade:	4632      	mov	r2, r6
 8003ae0:	4641      	mov	r1, r8
 8003ae2:	6820      	ldr	r0, [r4, #0]
 8003ae4:	f000 fac6 	bl	8004074 <memmove>
 8003ae8:	68a3      	ldr	r3, [r4, #8]
 8003aea:	2000      	movs	r0, #0
 8003aec:	1b9b      	subs	r3, r3, r6
 8003aee:	60a3      	str	r3, [r4, #8]
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	4433      	add	r3, r6
 8003af4:	6023      	str	r3, [r4, #0]
 8003af6:	e7db      	b.n	8003ab0 <__ssputs_r+0x58>
 8003af8:	462a      	mov	r2, r5
 8003afa:	f000 fbb1 	bl	8004260 <_realloc_r>
 8003afe:	4606      	mov	r6, r0
 8003b00:	2800      	cmp	r0, #0
 8003b02:	d1e1      	bne.n	8003ac8 <__ssputs_r+0x70>
 8003b04:	4650      	mov	r0, sl
 8003b06:	6921      	ldr	r1, [r4, #16]
 8003b08:	f000 face 	bl	80040a8 <_free_r>
 8003b0c:	e7c7      	b.n	8003a9e <__ssputs_r+0x46>
	...

08003b10 <_svfiprintf_r>:
 8003b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b14:	4698      	mov	r8, r3
 8003b16:	898b      	ldrh	r3, [r1, #12]
 8003b18:	4607      	mov	r7, r0
 8003b1a:	061b      	lsls	r3, r3, #24
 8003b1c:	460d      	mov	r5, r1
 8003b1e:	4614      	mov	r4, r2
 8003b20:	b09d      	sub	sp, #116	; 0x74
 8003b22:	d50e      	bpl.n	8003b42 <_svfiprintf_r+0x32>
 8003b24:	690b      	ldr	r3, [r1, #16]
 8003b26:	b963      	cbnz	r3, 8003b42 <_svfiprintf_r+0x32>
 8003b28:	2140      	movs	r1, #64	; 0x40
 8003b2a:	f000 fb25 	bl	8004178 <_malloc_r>
 8003b2e:	6028      	str	r0, [r5, #0]
 8003b30:	6128      	str	r0, [r5, #16]
 8003b32:	b920      	cbnz	r0, 8003b3e <_svfiprintf_r+0x2e>
 8003b34:	230c      	movs	r3, #12
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3c:	e0d1      	b.n	8003ce2 <_svfiprintf_r+0x1d2>
 8003b3e:	2340      	movs	r3, #64	; 0x40
 8003b40:	616b      	str	r3, [r5, #20]
 8003b42:	2300      	movs	r3, #0
 8003b44:	9309      	str	r3, [sp, #36]	; 0x24
 8003b46:	2320      	movs	r3, #32
 8003b48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b4c:	2330      	movs	r3, #48	; 0x30
 8003b4e:	f04f 0901 	mov.w	r9, #1
 8003b52:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003cfc <_svfiprintf_r+0x1ec>
 8003b5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b5e:	4623      	mov	r3, r4
 8003b60:	469a      	mov	sl, r3
 8003b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b66:	b10a      	cbz	r2, 8003b6c <_svfiprintf_r+0x5c>
 8003b68:	2a25      	cmp	r2, #37	; 0x25
 8003b6a:	d1f9      	bne.n	8003b60 <_svfiprintf_r+0x50>
 8003b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8003b70:	d00b      	beq.n	8003b8a <_svfiprintf_r+0x7a>
 8003b72:	465b      	mov	r3, fp
 8003b74:	4622      	mov	r2, r4
 8003b76:	4629      	mov	r1, r5
 8003b78:	4638      	mov	r0, r7
 8003b7a:	f7ff ff6d 	bl	8003a58 <__ssputs_r>
 8003b7e:	3001      	adds	r0, #1
 8003b80:	f000 80aa 	beq.w	8003cd8 <_svfiprintf_r+0x1c8>
 8003b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b86:	445a      	add	r2, fp
 8003b88:	9209      	str	r2, [sp, #36]	; 0x24
 8003b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 80a2 	beq.w	8003cd8 <_svfiprintf_r+0x1c8>
 8003b94:	2300      	movs	r3, #0
 8003b96:	f04f 32ff 	mov.w	r2, #4294967295
 8003b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b9e:	f10a 0a01 	add.w	sl, sl, #1
 8003ba2:	9304      	str	r3, [sp, #16]
 8003ba4:	9307      	str	r3, [sp, #28]
 8003ba6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003baa:	931a      	str	r3, [sp, #104]	; 0x68
 8003bac:	4654      	mov	r4, sl
 8003bae:	2205      	movs	r2, #5
 8003bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bb4:	4851      	ldr	r0, [pc, #324]	; (8003cfc <_svfiprintf_r+0x1ec>)
 8003bb6:	f000 fa41 	bl	800403c <memchr>
 8003bba:	9a04      	ldr	r2, [sp, #16]
 8003bbc:	b9d8      	cbnz	r0, 8003bf6 <_svfiprintf_r+0xe6>
 8003bbe:	06d0      	lsls	r0, r2, #27
 8003bc0:	bf44      	itt	mi
 8003bc2:	2320      	movmi	r3, #32
 8003bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bc8:	0711      	lsls	r1, r2, #28
 8003bca:	bf44      	itt	mi
 8003bcc:	232b      	movmi	r3, #43	; 0x2b
 8003bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8003bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8003bd8:	d015      	beq.n	8003c06 <_svfiprintf_r+0xf6>
 8003bda:	4654      	mov	r4, sl
 8003bdc:	2000      	movs	r0, #0
 8003bde:	f04f 0c0a 	mov.w	ip, #10
 8003be2:	9a07      	ldr	r2, [sp, #28]
 8003be4:	4621      	mov	r1, r4
 8003be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bea:	3b30      	subs	r3, #48	; 0x30
 8003bec:	2b09      	cmp	r3, #9
 8003bee:	d94e      	bls.n	8003c8e <_svfiprintf_r+0x17e>
 8003bf0:	b1b0      	cbz	r0, 8003c20 <_svfiprintf_r+0x110>
 8003bf2:	9207      	str	r2, [sp, #28]
 8003bf4:	e014      	b.n	8003c20 <_svfiprintf_r+0x110>
 8003bf6:	eba0 0308 	sub.w	r3, r0, r8
 8003bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	46a2      	mov	sl, r4
 8003c02:	9304      	str	r3, [sp, #16]
 8003c04:	e7d2      	b.n	8003bac <_svfiprintf_r+0x9c>
 8003c06:	9b03      	ldr	r3, [sp, #12]
 8003c08:	1d19      	adds	r1, r3, #4
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	9103      	str	r1, [sp, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	bfbb      	ittet	lt
 8003c12:	425b      	neglt	r3, r3
 8003c14:	f042 0202 	orrlt.w	r2, r2, #2
 8003c18:	9307      	strge	r3, [sp, #28]
 8003c1a:	9307      	strlt	r3, [sp, #28]
 8003c1c:	bfb8      	it	lt
 8003c1e:	9204      	strlt	r2, [sp, #16]
 8003c20:	7823      	ldrb	r3, [r4, #0]
 8003c22:	2b2e      	cmp	r3, #46	; 0x2e
 8003c24:	d10c      	bne.n	8003c40 <_svfiprintf_r+0x130>
 8003c26:	7863      	ldrb	r3, [r4, #1]
 8003c28:	2b2a      	cmp	r3, #42	; 0x2a
 8003c2a:	d135      	bne.n	8003c98 <_svfiprintf_r+0x188>
 8003c2c:	9b03      	ldr	r3, [sp, #12]
 8003c2e:	3402      	adds	r4, #2
 8003c30:	1d1a      	adds	r2, r3, #4
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	9203      	str	r2, [sp, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	bfb8      	it	lt
 8003c3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c3e:	9305      	str	r3, [sp, #20]
 8003c40:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003d00 <_svfiprintf_r+0x1f0>
 8003c44:	2203      	movs	r2, #3
 8003c46:	4650      	mov	r0, sl
 8003c48:	7821      	ldrb	r1, [r4, #0]
 8003c4a:	f000 f9f7 	bl	800403c <memchr>
 8003c4e:	b140      	cbz	r0, 8003c62 <_svfiprintf_r+0x152>
 8003c50:	2340      	movs	r3, #64	; 0x40
 8003c52:	eba0 000a 	sub.w	r0, r0, sl
 8003c56:	fa03 f000 	lsl.w	r0, r3, r0
 8003c5a:	9b04      	ldr	r3, [sp, #16]
 8003c5c:	3401      	adds	r4, #1
 8003c5e:	4303      	orrs	r3, r0
 8003c60:	9304      	str	r3, [sp, #16]
 8003c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c66:	2206      	movs	r2, #6
 8003c68:	4826      	ldr	r0, [pc, #152]	; (8003d04 <_svfiprintf_r+0x1f4>)
 8003c6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c6e:	f000 f9e5 	bl	800403c <memchr>
 8003c72:	2800      	cmp	r0, #0
 8003c74:	d038      	beq.n	8003ce8 <_svfiprintf_r+0x1d8>
 8003c76:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <_svfiprintf_r+0x1f8>)
 8003c78:	bb1b      	cbnz	r3, 8003cc2 <_svfiprintf_r+0x1b2>
 8003c7a:	9b03      	ldr	r3, [sp, #12]
 8003c7c:	3307      	adds	r3, #7
 8003c7e:	f023 0307 	bic.w	r3, r3, #7
 8003c82:	3308      	adds	r3, #8
 8003c84:	9303      	str	r3, [sp, #12]
 8003c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c88:	4433      	add	r3, r6
 8003c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c8c:	e767      	b.n	8003b5e <_svfiprintf_r+0x4e>
 8003c8e:	460c      	mov	r4, r1
 8003c90:	2001      	movs	r0, #1
 8003c92:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c96:	e7a5      	b.n	8003be4 <_svfiprintf_r+0xd4>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f04f 0c0a 	mov.w	ip, #10
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	3401      	adds	r4, #1
 8003ca2:	9305      	str	r3, [sp, #20]
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003caa:	3a30      	subs	r2, #48	; 0x30
 8003cac:	2a09      	cmp	r2, #9
 8003cae:	d903      	bls.n	8003cb8 <_svfiprintf_r+0x1a8>
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0c5      	beq.n	8003c40 <_svfiprintf_r+0x130>
 8003cb4:	9105      	str	r1, [sp, #20]
 8003cb6:	e7c3      	b.n	8003c40 <_svfiprintf_r+0x130>
 8003cb8:	4604      	mov	r4, r0
 8003cba:	2301      	movs	r3, #1
 8003cbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cc0:	e7f0      	b.n	8003ca4 <_svfiprintf_r+0x194>
 8003cc2:	ab03      	add	r3, sp, #12
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	462a      	mov	r2, r5
 8003cc8:	4638      	mov	r0, r7
 8003cca:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <_svfiprintf_r+0x1fc>)
 8003ccc:	a904      	add	r1, sp, #16
 8003cce:	f3af 8000 	nop.w
 8003cd2:	1c42      	adds	r2, r0, #1
 8003cd4:	4606      	mov	r6, r0
 8003cd6:	d1d6      	bne.n	8003c86 <_svfiprintf_r+0x176>
 8003cd8:	89ab      	ldrh	r3, [r5, #12]
 8003cda:	065b      	lsls	r3, r3, #25
 8003cdc:	f53f af2c 	bmi.w	8003b38 <_svfiprintf_r+0x28>
 8003ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ce2:	b01d      	add	sp, #116	; 0x74
 8003ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ce8:	ab03      	add	r3, sp, #12
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	462a      	mov	r2, r5
 8003cee:	4638      	mov	r0, r7
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <_svfiprintf_r+0x1fc>)
 8003cf2:	a904      	add	r1, sp, #16
 8003cf4:	f000 f87c 	bl	8003df0 <_printf_i>
 8003cf8:	e7eb      	b.n	8003cd2 <_svfiprintf_r+0x1c2>
 8003cfa:	bf00      	nop
 8003cfc:	0800438c 	.word	0x0800438c
 8003d00:	08004392 	.word	0x08004392
 8003d04:	08004396 	.word	0x08004396
 8003d08:	00000000 	.word	0x00000000
 8003d0c:	08003a59 	.word	0x08003a59

08003d10 <_printf_common>:
 8003d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d14:	4616      	mov	r6, r2
 8003d16:	4699      	mov	r9, r3
 8003d18:	688a      	ldr	r2, [r1, #8]
 8003d1a:	690b      	ldr	r3, [r1, #16]
 8003d1c:	4607      	mov	r7, r0
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	bfb8      	it	lt
 8003d22:	4613      	movlt	r3, r2
 8003d24:	6033      	str	r3, [r6, #0]
 8003d26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d2a:	460c      	mov	r4, r1
 8003d2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d30:	b10a      	cbz	r2, 8003d36 <_printf_common+0x26>
 8003d32:	3301      	adds	r3, #1
 8003d34:	6033      	str	r3, [r6, #0]
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	0699      	lsls	r1, r3, #26
 8003d3a:	bf42      	ittt	mi
 8003d3c:	6833      	ldrmi	r3, [r6, #0]
 8003d3e:	3302      	addmi	r3, #2
 8003d40:	6033      	strmi	r3, [r6, #0]
 8003d42:	6825      	ldr	r5, [r4, #0]
 8003d44:	f015 0506 	ands.w	r5, r5, #6
 8003d48:	d106      	bne.n	8003d58 <_printf_common+0x48>
 8003d4a:	f104 0a19 	add.w	sl, r4, #25
 8003d4e:	68e3      	ldr	r3, [r4, #12]
 8003d50:	6832      	ldr	r2, [r6, #0]
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	42ab      	cmp	r3, r5
 8003d56:	dc28      	bgt.n	8003daa <_printf_common+0x9a>
 8003d58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d5c:	1e13      	subs	r3, r2, #0
 8003d5e:	6822      	ldr	r2, [r4, #0]
 8003d60:	bf18      	it	ne
 8003d62:	2301      	movne	r3, #1
 8003d64:	0692      	lsls	r2, r2, #26
 8003d66:	d42d      	bmi.n	8003dc4 <_printf_common+0xb4>
 8003d68:	4649      	mov	r1, r9
 8003d6a:	4638      	mov	r0, r7
 8003d6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d70:	47c0      	blx	r8
 8003d72:	3001      	adds	r0, #1
 8003d74:	d020      	beq.n	8003db8 <_printf_common+0xa8>
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	68e5      	ldr	r5, [r4, #12]
 8003d7a:	f003 0306 	and.w	r3, r3, #6
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	bf18      	it	ne
 8003d82:	2500      	movne	r5, #0
 8003d84:	6832      	ldr	r2, [r6, #0]
 8003d86:	f04f 0600 	mov.w	r6, #0
 8003d8a:	68a3      	ldr	r3, [r4, #8]
 8003d8c:	bf08      	it	eq
 8003d8e:	1aad      	subeq	r5, r5, r2
 8003d90:	6922      	ldr	r2, [r4, #16]
 8003d92:	bf08      	it	eq
 8003d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	bfc4      	itt	gt
 8003d9c:	1a9b      	subgt	r3, r3, r2
 8003d9e:	18ed      	addgt	r5, r5, r3
 8003da0:	341a      	adds	r4, #26
 8003da2:	42b5      	cmp	r5, r6
 8003da4:	d11a      	bne.n	8003ddc <_printf_common+0xcc>
 8003da6:	2000      	movs	r0, #0
 8003da8:	e008      	b.n	8003dbc <_printf_common+0xac>
 8003daa:	2301      	movs	r3, #1
 8003dac:	4652      	mov	r2, sl
 8003dae:	4649      	mov	r1, r9
 8003db0:	4638      	mov	r0, r7
 8003db2:	47c0      	blx	r8
 8003db4:	3001      	adds	r0, #1
 8003db6:	d103      	bne.n	8003dc0 <_printf_common+0xb0>
 8003db8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dc0:	3501      	adds	r5, #1
 8003dc2:	e7c4      	b.n	8003d4e <_printf_common+0x3e>
 8003dc4:	2030      	movs	r0, #48	; 0x30
 8003dc6:	18e1      	adds	r1, r4, r3
 8003dc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dd2:	4422      	add	r2, r4
 8003dd4:	3302      	adds	r3, #2
 8003dd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003dda:	e7c5      	b.n	8003d68 <_printf_common+0x58>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	4622      	mov	r2, r4
 8003de0:	4649      	mov	r1, r9
 8003de2:	4638      	mov	r0, r7
 8003de4:	47c0      	blx	r8
 8003de6:	3001      	adds	r0, #1
 8003de8:	d0e6      	beq.n	8003db8 <_printf_common+0xa8>
 8003dea:	3601      	adds	r6, #1
 8003dec:	e7d9      	b.n	8003da2 <_printf_common+0x92>
	...

08003df0 <_printf_i>:
 8003df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003df4:	7e0f      	ldrb	r7, [r1, #24]
 8003df6:	4691      	mov	r9, r2
 8003df8:	2f78      	cmp	r7, #120	; 0x78
 8003dfa:	4680      	mov	r8, r0
 8003dfc:	460c      	mov	r4, r1
 8003dfe:	469a      	mov	sl, r3
 8003e00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e06:	d807      	bhi.n	8003e18 <_printf_i+0x28>
 8003e08:	2f62      	cmp	r7, #98	; 0x62
 8003e0a:	d80a      	bhi.n	8003e22 <_printf_i+0x32>
 8003e0c:	2f00      	cmp	r7, #0
 8003e0e:	f000 80d9 	beq.w	8003fc4 <_printf_i+0x1d4>
 8003e12:	2f58      	cmp	r7, #88	; 0x58
 8003e14:	f000 80a4 	beq.w	8003f60 <_printf_i+0x170>
 8003e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e20:	e03a      	b.n	8003e98 <_printf_i+0xa8>
 8003e22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e26:	2b15      	cmp	r3, #21
 8003e28:	d8f6      	bhi.n	8003e18 <_printf_i+0x28>
 8003e2a:	a101      	add	r1, pc, #4	; (adr r1, 8003e30 <_printf_i+0x40>)
 8003e2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e30:	08003e89 	.word	0x08003e89
 8003e34:	08003e9d 	.word	0x08003e9d
 8003e38:	08003e19 	.word	0x08003e19
 8003e3c:	08003e19 	.word	0x08003e19
 8003e40:	08003e19 	.word	0x08003e19
 8003e44:	08003e19 	.word	0x08003e19
 8003e48:	08003e9d 	.word	0x08003e9d
 8003e4c:	08003e19 	.word	0x08003e19
 8003e50:	08003e19 	.word	0x08003e19
 8003e54:	08003e19 	.word	0x08003e19
 8003e58:	08003e19 	.word	0x08003e19
 8003e5c:	08003fab 	.word	0x08003fab
 8003e60:	08003ecd 	.word	0x08003ecd
 8003e64:	08003f8d 	.word	0x08003f8d
 8003e68:	08003e19 	.word	0x08003e19
 8003e6c:	08003e19 	.word	0x08003e19
 8003e70:	08003fcd 	.word	0x08003fcd
 8003e74:	08003e19 	.word	0x08003e19
 8003e78:	08003ecd 	.word	0x08003ecd
 8003e7c:	08003e19 	.word	0x08003e19
 8003e80:	08003e19 	.word	0x08003e19
 8003e84:	08003f95 	.word	0x08003f95
 8003e88:	682b      	ldr	r3, [r5, #0]
 8003e8a:	1d1a      	adds	r2, r3, #4
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	602a      	str	r2, [r5, #0]
 8003e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0a4      	b.n	8003fe6 <_printf_i+0x1f6>
 8003e9c:	6820      	ldr	r0, [r4, #0]
 8003e9e:	6829      	ldr	r1, [r5, #0]
 8003ea0:	0606      	lsls	r6, r0, #24
 8003ea2:	f101 0304 	add.w	r3, r1, #4
 8003ea6:	d50a      	bpl.n	8003ebe <_printf_i+0xce>
 8003ea8:	680e      	ldr	r6, [r1, #0]
 8003eaa:	602b      	str	r3, [r5, #0]
 8003eac:	2e00      	cmp	r6, #0
 8003eae:	da03      	bge.n	8003eb8 <_printf_i+0xc8>
 8003eb0:	232d      	movs	r3, #45	; 0x2d
 8003eb2:	4276      	negs	r6, r6
 8003eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003eb8:	230a      	movs	r3, #10
 8003eba:	485e      	ldr	r0, [pc, #376]	; (8004034 <_printf_i+0x244>)
 8003ebc:	e019      	b.n	8003ef2 <_printf_i+0x102>
 8003ebe:	680e      	ldr	r6, [r1, #0]
 8003ec0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ec4:	602b      	str	r3, [r5, #0]
 8003ec6:	bf18      	it	ne
 8003ec8:	b236      	sxthne	r6, r6
 8003eca:	e7ef      	b.n	8003eac <_printf_i+0xbc>
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	6820      	ldr	r0, [r4, #0]
 8003ed0:	1d19      	adds	r1, r3, #4
 8003ed2:	6029      	str	r1, [r5, #0]
 8003ed4:	0601      	lsls	r1, r0, #24
 8003ed6:	d501      	bpl.n	8003edc <_printf_i+0xec>
 8003ed8:	681e      	ldr	r6, [r3, #0]
 8003eda:	e002      	b.n	8003ee2 <_printf_i+0xf2>
 8003edc:	0646      	lsls	r6, r0, #25
 8003ede:	d5fb      	bpl.n	8003ed8 <_printf_i+0xe8>
 8003ee0:	881e      	ldrh	r6, [r3, #0]
 8003ee2:	2f6f      	cmp	r7, #111	; 0x6f
 8003ee4:	bf0c      	ite	eq
 8003ee6:	2308      	moveq	r3, #8
 8003ee8:	230a      	movne	r3, #10
 8003eea:	4852      	ldr	r0, [pc, #328]	; (8004034 <_printf_i+0x244>)
 8003eec:	2100      	movs	r1, #0
 8003eee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ef2:	6865      	ldr	r5, [r4, #4]
 8003ef4:	2d00      	cmp	r5, #0
 8003ef6:	bfa8      	it	ge
 8003ef8:	6821      	ldrge	r1, [r4, #0]
 8003efa:	60a5      	str	r5, [r4, #8]
 8003efc:	bfa4      	itt	ge
 8003efe:	f021 0104 	bicge.w	r1, r1, #4
 8003f02:	6021      	strge	r1, [r4, #0]
 8003f04:	b90e      	cbnz	r6, 8003f0a <_printf_i+0x11a>
 8003f06:	2d00      	cmp	r5, #0
 8003f08:	d04d      	beq.n	8003fa6 <_printf_i+0x1b6>
 8003f0a:	4615      	mov	r5, r2
 8003f0c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f10:	fb03 6711 	mls	r7, r3, r1, r6
 8003f14:	5dc7      	ldrb	r7, [r0, r7]
 8003f16:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f1a:	4637      	mov	r7, r6
 8003f1c:	42bb      	cmp	r3, r7
 8003f1e:	460e      	mov	r6, r1
 8003f20:	d9f4      	bls.n	8003f0c <_printf_i+0x11c>
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d10b      	bne.n	8003f3e <_printf_i+0x14e>
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	07de      	lsls	r6, r3, #31
 8003f2a:	d508      	bpl.n	8003f3e <_printf_i+0x14e>
 8003f2c:	6923      	ldr	r3, [r4, #16]
 8003f2e:	6861      	ldr	r1, [r4, #4]
 8003f30:	4299      	cmp	r1, r3
 8003f32:	bfde      	ittt	le
 8003f34:	2330      	movle	r3, #48	; 0x30
 8003f36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f3e:	1b52      	subs	r2, r2, r5
 8003f40:	6122      	str	r2, [r4, #16]
 8003f42:	464b      	mov	r3, r9
 8003f44:	4621      	mov	r1, r4
 8003f46:	4640      	mov	r0, r8
 8003f48:	f8cd a000 	str.w	sl, [sp]
 8003f4c:	aa03      	add	r2, sp, #12
 8003f4e:	f7ff fedf 	bl	8003d10 <_printf_common>
 8003f52:	3001      	adds	r0, #1
 8003f54:	d14c      	bne.n	8003ff0 <_printf_i+0x200>
 8003f56:	f04f 30ff 	mov.w	r0, #4294967295
 8003f5a:	b004      	add	sp, #16
 8003f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f60:	4834      	ldr	r0, [pc, #208]	; (8004034 <_printf_i+0x244>)
 8003f62:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003f66:	6829      	ldr	r1, [r5, #0]
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f6e:	6029      	str	r1, [r5, #0]
 8003f70:	061d      	lsls	r5, r3, #24
 8003f72:	d514      	bpl.n	8003f9e <_printf_i+0x1ae>
 8003f74:	07df      	lsls	r7, r3, #31
 8003f76:	bf44      	itt	mi
 8003f78:	f043 0320 	orrmi.w	r3, r3, #32
 8003f7c:	6023      	strmi	r3, [r4, #0]
 8003f7e:	b91e      	cbnz	r6, 8003f88 <_printf_i+0x198>
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	f023 0320 	bic.w	r3, r3, #32
 8003f86:	6023      	str	r3, [r4, #0]
 8003f88:	2310      	movs	r3, #16
 8003f8a:	e7af      	b.n	8003eec <_printf_i+0xfc>
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	f043 0320 	orr.w	r3, r3, #32
 8003f92:	6023      	str	r3, [r4, #0]
 8003f94:	2378      	movs	r3, #120	; 0x78
 8003f96:	4828      	ldr	r0, [pc, #160]	; (8004038 <_printf_i+0x248>)
 8003f98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f9c:	e7e3      	b.n	8003f66 <_printf_i+0x176>
 8003f9e:	0659      	lsls	r1, r3, #25
 8003fa0:	bf48      	it	mi
 8003fa2:	b2b6      	uxthmi	r6, r6
 8003fa4:	e7e6      	b.n	8003f74 <_printf_i+0x184>
 8003fa6:	4615      	mov	r5, r2
 8003fa8:	e7bb      	b.n	8003f22 <_printf_i+0x132>
 8003faa:	682b      	ldr	r3, [r5, #0]
 8003fac:	6826      	ldr	r6, [r4, #0]
 8003fae:	1d18      	adds	r0, r3, #4
 8003fb0:	6961      	ldr	r1, [r4, #20]
 8003fb2:	6028      	str	r0, [r5, #0]
 8003fb4:	0635      	lsls	r5, r6, #24
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	d501      	bpl.n	8003fbe <_printf_i+0x1ce>
 8003fba:	6019      	str	r1, [r3, #0]
 8003fbc:	e002      	b.n	8003fc4 <_printf_i+0x1d4>
 8003fbe:	0670      	lsls	r0, r6, #25
 8003fc0:	d5fb      	bpl.n	8003fba <_printf_i+0x1ca>
 8003fc2:	8019      	strh	r1, [r3, #0]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	4615      	mov	r5, r2
 8003fc8:	6123      	str	r3, [r4, #16]
 8003fca:	e7ba      	b.n	8003f42 <_printf_i+0x152>
 8003fcc:	682b      	ldr	r3, [r5, #0]
 8003fce:	2100      	movs	r1, #0
 8003fd0:	1d1a      	adds	r2, r3, #4
 8003fd2:	602a      	str	r2, [r5, #0]
 8003fd4:	681d      	ldr	r5, [r3, #0]
 8003fd6:	6862      	ldr	r2, [r4, #4]
 8003fd8:	4628      	mov	r0, r5
 8003fda:	f000 f82f 	bl	800403c <memchr>
 8003fde:	b108      	cbz	r0, 8003fe4 <_printf_i+0x1f4>
 8003fe0:	1b40      	subs	r0, r0, r5
 8003fe2:	6060      	str	r0, [r4, #4]
 8003fe4:	6863      	ldr	r3, [r4, #4]
 8003fe6:	6123      	str	r3, [r4, #16]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fee:	e7a8      	b.n	8003f42 <_printf_i+0x152>
 8003ff0:	462a      	mov	r2, r5
 8003ff2:	4649      	mov	r1, r9
 8003ff4:	4640      	mov	r0, r8
 8003ff6:	6923      	ldr	r3, [r4, #16]
 8003ff8:	47d0      	blx	sl
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	d0ab      	beq.n	8003f56 <_printf_i+0x166>
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	079b      	lsls	r3, r3, #30
 8004002:	d413      	bmi.n	800402c <_printf_i+0x23c>
 8004004:	68e0      	ldr	r0, [r4, #12]
 8004006:	9b03      	ldr	r3, [sp, #12]
 8004008:	4298      	cmp	r0, r3
 800400a:	bfb8      	it	lt
 800400c:	4618      	movlt	r0, r3
 800400e:	e7a4      	b.n	8003f5a <_printf_i+0x16a>
 8004010:	2301      	movs	r3, #1
 8004012:	4632      	mov	r2, r6
 8004014:	4649      	mov	r1, r9
 8004016:	4640      	mov	r0, r8
 8004018:	47d0      	blx	sl
 800401a:	3001      	adds	r0, #1
 800401c:	d09b      	beq.n	8003f56 <_printf_i+0x166>
 800401e:	3501      	adds	r5, #1
 8004020:	68e3      	ldr	r3, [r4, #12]
 8004022:	9903      	ldr	r1, [sp, #12]
 8004024:	1a5b      	subs	r3, r3, r1
 8004026:	42ab      	cmp	r3, r5
 8004028:	dcf2      	bgt.n	8004010 <_printf_i+0x220>
 800402a:	e7eb      	b.n	8004004 <_printf_i+0x214>
 800402c:	2500      	movs	r5, #0
 800402e:	f104 0619 	add.w	r6, r4, #25
 8004032:	e7f5      	b.n	8004020 <_printf_i+0x230>
 8004034:	0800439d 	.word	0x0800439d
 8004038:	080043ae 	.word	0x080043ae

0800403c <memchr>:
 800403c:	4603      	mov	r3, r0
 800403e:	b510      	push	{r4, lr}
 8004040:	b2c9      	uxtb	r1, r1
 8004042:	4402      	add	r2, r0
 8004044:	4293      	cmp	r3, r2
 8004046:	4618      	mov	r0, r3
 8004048:	d101      	bne.n	800404e <memchr+0x12>
 800404a:	2000      	movs	r0, #0
 800404c:	e003      	b.n	8004056 <memchr+0x1a>
 800404e:	7804      	ldrb	r4, [r0, #0]
 8004050:	3301      	adds	r3, #1
 8004052:	428c      	cmp	r4, r1
 8004054:	d1f6      	bne.n	8004044 <memchr+0x8>
 8004056:	bd10      	pop	{r4, pc}

08004058 <memcpy>:
 8004058:	440a      	add	r2, r1
 800405a:	4291      	cmp	r1, r2
 800405c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004060:	d100      	bne.n	8004064 <memcpy+0xc>
 8004062:	4770      	bx	lr
 8004064:	b510      	push	{r4, lr}
 8004066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800406a:	4291      	cmp	r1, r2
 800406c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004070:	d1f9      	bne.n	8004066 <memcpy+0xe>
 8004072:	bd10      	pop	{r4, pc}

08004074 <memmove>:
 8004074:	4288      	cmp	r0, r1
 8004076:	b510      	push	{r4, lr}
 8004078:	eb01 0402 	add.w	r4, r1, r2
 800407c:	d902      	bls.n	8004084 <memmove+0x10>
 800407e:	4284      	cmp	r4, r0
 8004080:	4623      	mov	r3, r4
 8004082:	d807      	bhi.n	8004094 <memmove+0x20>
 8004084:	1e43      	subs	r3, r0, #1
 8004086:	42a1      	cmp	r1, r4
 8004088:	d008      	beq.n	800409c <memmove+0x28>
 800408a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800408e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004092:	e7f8      	b.n	8004086 <memmove+0x12>
 8004094:	4601      	mov	r1, r0
 8004096:	4402      	add	r2, r0
 8004098:	428a      	cmp	r2, r1
 800409a:	d100      	bne.n	800409e <memmove+0x2a>
 800409c:	bd10      	pop	{r4, pc}
 800409e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040a6:	e7f7      	b.n	8004098 <memmove+0x24>

080040a8 <_free_r>:
 80040a8:	b538      	push	{r3, r4, r5, lr}
 80040aa:	4605      	mov	r5, r0
 80040ac:	2900      	cmp	r1, #0
 80040ae:	d040      	beq.n	8004132 <_free_r+0x8a>
 80040b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040b4:	1f0c      	subs	r4, r1, #4
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	bfb8      	it	lt
 80040ba:	18e4      	addlt	r4, r4, r3
 80040bc:	f000 f910 	bl	80042e0 <__malloc_lock>
 80040c0:	4a1c      	ldr	r2, [pc, #112]	; (8004134 <_free_r+0x8c>)
 80040c2:	6813      	ldr	r3, [r2, #0]
 80040c4:	b933      	cbnz	r3, 80040d4 <_free_r+0x2c>
 80040c6:	6063      	str	r3, [r4, #4]
 80040c8:	6014      	str	r4, [r2, #0]
 80040ca:	4628      	mov	r0, r5
 80040cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040d0:	f000 b90c 	b.w	80042ec <__malloc_unlock>
 80040d4:	42a3      	cmp	r3, r4
 80040d6:	d908      	bls.n	80040ea <_free_r+0x42>
 80040d8:	6820      	ldr	r0, [r4, #0]
 80040da:	1821      	adds	r1, r4, r0
 80040dc:	428b      	cmp	r3, r1
 80040de:	bf01      	itttt	eq
 80040e0:	6819      	ldreq	r1, [r3, #0]
 80040e2:	685b      	ldreq	r3, [r3, #4]
 80040e4:	1809      	addeq	r1, r1, r0
 80040e6:	6021      	streq	r1, [r4, #0]
 80040e8:	e7ed      	b.n	80040c6 <_free_r+0x1e>
 80040ea:	461a      	mov	r2, r3
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	b10b      	cbz	r3, 80040f4 <_free_r+0x4c>
 80040f0:	42a3      	cmp	r3, r4
 80040f2:	d9fa      	bls.n	80040ea <_free_r+0x42>
 80040f4:	6811      	ldr	r1, [r2, #0]
 80040f6:	1850      	adds	r0, r2, r1
 80040f8:	42a0      	cmp	r0, r4
 80040fa:	d10b      	bne.n	8004114 <_free_r+0x6c>
 80040fc:	6820      	ldr	r0, [r4, #0]
 80040fe:	4401      	add	r1, r0
 8004100:	1850      	adds	r0, r2, r1
 8004102:	4283      	cmp	r3, r0
 8004104:	6011      	str	r1, [r2, #0]
 8004106:	d1e0      	bne.n	80040ca <_free_r+0x22>
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	4401      	add	r1, r0
 800410e:	6011      	str	r1, [r2, #0]
 8004110:	6053      	str	r3, [r2, #4]
 8004112:	e7da      	b.n	80040ca <_free_r+0x22>
 8004114:	d902      	bls.n	800411c <_free_r+0x74>
 8004116:	230c      	movs	r3, #12
 8004118:	602b      	str	r3, [r5, #0]
 800411a:	e7d6      	b.n	80040ca <_free_r+0x22>
 800411c:	6820      	ldr	r0, [r4, #0]
 800411e:	1821      	adds	r1, r4, r0
 8004120:	428b      	cmp	r3, r1
 8004122:	bf01      	itttt	eq
 8004124:	6819      	ldreq	r1, [r3, #0]
 8004126:	685b      	ldreq	r3, [r3, #4]
 8004128:	1809      	addeq	r1, r1, r0
 800412a:	6021      	streq	r1, [r4, #0]
 800412c:	6063      	str	r3, [r4, #4]
 800412e:	6054      	str	r4, [r2, #4]
 8004130:	e7cb      	b.n	80040ca <_free_r+0x22>
 8004132:	bd38      	pop	{r3, r4, r5, pc}
 8004134:	20000110 	.word	0x20000110

08004138 <sbrk_aligned>:
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	4e0e      	ldr	r6, [pc, #56]	; (8004174 <sbrk_aligned+0x3c>)
 800413c:	460c      	mov	r4, r1
 800413e:	6831      	ldr	r1, [r6, #0]
 8004140:	4605      	mov	r5, r0
 8004142:	b911      	cbnz	r1, 800414a <sbrk_aligned+0x12>
 8004144:	f000 f8bc 	bl	80042c0 <_sbrk_r>
 8004148:	6030      	str	r0, [r6, #0]
 800414a:	4621      	mov	r1, r4
 800414c:	4628      	mov	r0, r5
 800414e:	f000 f8b7 	bl	80042c0 <_sbrk_r>
 8004152:	1c43      	adds	r3, r0, #1
 8004154:	d00a      	beq.n	800416c <sbrk_aligned+0x34>
 8004156:	1cc4      	adds	r4, r0, #3
 8004158:	f024 0403 	bic.w	r4, r4, #3
 800415c:	42a0      	cmp	r0, r4
 800415e:	d007      	beq.n	8004170 <sbrk_aligned+0x38>
 8004160:	1a21      	subs	r1, r4, r0
 8004162:	4628      	mov	r0, r5
 8004164:	f000 f8ac 	bl	80042c0 <_sbrk_r>
 8004168:	3001      	adds	r0, #1
 800416a:	d101      	bne.n	8004170 <sbrk_aligned+0x38>
 800416c:	f04f 34ff 	mov.w	r4, #4294967295
 8004170:	4620      	mov	r0, r4
 8004172:	bd70      	pop	{r4, r5, r6, pc}
 8004174:	20000114 	.word	0x20000114

08004178 <_malloc_r>:
 8004178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800417c:	1ccd      	adds	r5, r1, #3
 800417e:	f025 0503 	bic.w	r5, r5, #3
 8004182:	3508      	adds	r5, #8
 8004184:	2d0c      	cmp	r5, #12
 8004186:	bf38      	it	cc
 8004188:	250c      	movcc	r5, #12
 800418a:	2d00      	cmp	r5, #0
 800418c:	4607      	mov	r7, r0
 800418e:	db01      	blt.n	8004194 <_malloc_r+0x1c>
 8004190:	42a9      	cmp	r1, r5
 8004192:	d905      	bls.n	80041a0 <_malloc_r+0x28>
 8004194:	230c      	movs	r3, #12
 8004196:	2600      	movs	r6, #0
 8004198:	603b      	str	r3, [r7, #0]
 800419a:	4630      	mov	r0, r6
 800419c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041a0:	4e2e      	ldr	r6, [pc, #184]	; (800425c <_malloc_r+0xe4>)
 80041a2:	f000 f89d 	bl	80042e0 <__malloc_lock>
 80041a6:	6833      	ldr	r3, [r6, #0]
 80041a8:	461c      	mov	r4, r3
 80041aa:	bb34      	cbnz	r4, 80041fa <_malloc_r+0x82>
 80041ac:	4629      	mov	r1, r5
 80041ae:	4638      	mov	r0, r7
 80041b0:	f7ff ffc2 	bl	8004138 <sbrk_aligned>
 80041b4:	1c43      	adds	r3, r0, #1
 80041b6:	4604      	mov	r4, r0
 80041b8:	d14d      	bne.n	8004256 <_malloc_r+0xde>
 80041ba:	6834      	ldr	r4, [r6, #0]
 80041bc:	4626      	mov	r6, r4
 80041be:	2e00      	cmp	r6, #0
 80041c0:	d140      	bne.n	8004244 <_malloc_r+0xcc>
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	4631      	mov	r1, r6
 80041c6:	4638      	mov	r0, r7
 80041c8:	eb04 0803 	add.w	r8, r4, r3
 80041cc:	f000 f878 	bl	80042c0 <_sbrk_r>
 80041d0:	4580      	cmp	r8, r0
 80041d2:	d13a      	bne.n	800424a <_malloc_r+0xd2>
 80041d4:	6821      	ldr	r1, [r4, #0]
 80041d6:	3503      	adds	r5, #3
 80041d8:	1a6d      	subs	r5, r5, r1
 80041da:	f025 0503 	bic.w	r5, r5, #3
 80041de:	3508      	adds	r5, #8
 80041e0:	2d0c      	cmp	r5, #12
 80041e2:	bf38      	it	cc
 80041e4:	250c      	movcc	r5, #12
 80041e6:	4638      	mov	r0, r7
 80041e8:	4629      	mov	r1, r5
 80041ea:	f7ff ffa5 	bl	8004138 <sbrk_aligned>
 80041ee:	3001      	adds	r0, #1
 80041f0:	d02b      	beq.n	800424a <_malloc_r+0xd2>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	442b      	add	r3, r5
 80041f6:	6023      	str	r3, [r4, #0]
 80041f8:	e00e      	b.n	8004218 <_malloc_r+0xa0>
 80041fa:	6822      	ldr	r2, [r4, #0]
 80041fc:	1b52      	subs	r2, r2, r5
 80041fe:	d41e      	bmi.n	800423e <_malloc_r+0xc6>
 8004200:	2a0b      	cmp	r2, #11
 8004202:	d916      	bls.n	8004232 <_malloc_r+0xba>
 8004204:	1961      	adds	r1, r4, r5
 8004206:	42a3      	cmp	r3, r4
 8004208:	6025      	str	r5, [r4, #0]
 800420a:	bf18      	it	ne
 800420c:	6059      	strne	r1, [r3, #4]
 800420e:	6863      	ldr	r3, [r4, #4]
 8004210:	bf08      	it	eq
 8004212:	6031      	streq	r1, [r6, #0]
 8004214:	5162      	str	r2, [r4, r5]
 8004216:	604b      	str	r3, [r1, #4]
 8004218:	4638      	mov	r0, r7
 800421a:	f104 060b 	add.w	r6, r4, #11
 800421e:	f000 f865 	bl	80042ec <__malloc_unlock>
 8004222:	f026 0607 	bic.w	r6, r6, #7
 8004226:	1d23      	adds	r3, r4, #4
 8004228:	1af2      	subs	r2, r6, r3
 800422a:	d0b6      	beq.n	800419a <_malloc_r+0x22>
 800422c:	1b9b      	subs	r3, r3, r6
 800422e:	50a3      	str	r3, [r4, r2]
 8004230:	e7b3      	b.n	800419a <_malloc_r+0x22>
 8004232:	6862      	ldr	r2, [r4, #4]
 8004234:	42a3      	cmp	r3, r4
 8004236:	bf0c      	ite	eq
 8004238:	6032      	streq	r2, [r6, #0]
 800423a:	605a      	strne	r2, [r3, #4]
 800423c:	e7ec      	b.n	8004218 <_malloc_r+0xa0>
 800423e:	4623      	mov	r3, r4
 8004240:	6864      	ldr	r4, [r4, #4]
 8004242:	e7b2      	b.n	80041aa <_malloc_r+0x32>
 8004244:	4634      	mov	r4, r6
 8004246:	6876      	ldr	r6, [r6, #4]
 8004248:	e7b9      	b.n	80041be <_malloc_r+0x46>
 800424a:	230c      	movs	r3, #12
 800424c:	4638      	mov	r0, r7
 800424e:	603b      	str	r3, [r7, #0]
 8004250:	f000 f84c 	bl	80042ec <__malloc_unlock>
 8004254:	e7a1      	b.n	800419a <_malloc_r+0x22>
 8004256:	6025      	str	r5, [r4, #0]
 8004258:	e7de      	b.n	8004218 <_malloc_r+0xa0>
 800425a:	bf00      	nop
 800425c:	20000110 	.word	0x20000110

08004260 <_realloc_r>:
 8004260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004264:	4680      	mov	r8, r0
 8004266:	4614      	mov	r4, r2
 8004268:	460e      	mov	r6, r1
 800426a:	b921      	cbnz	r1, 8004276 <_realloc_r+0x16>
 800426c:	4611      	mov	r1, r2
 800426e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004272:	f7ff bf81 	b.w	8004178 <_malloc_r>
 8004276:	b92a      	cbnz	r2, 8004284 <_realloc_r+0x24>
 8004278:	f7ff ff16 	bl	80040a8 <_free_r>
 800427c:	4625      	mov	r5, r4
 800427e:	4628      	mov	r0, r5
 8004280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004284:	f000 f838 	bl	80042f8 <_malloc_usable_size_r>
 8004288:	4284      	cmp	r4, r0
 800428a:	4607      	mov	r7, r0
 800428c:	d802      	bhi.n	8004294 <_realloc_r+0x34>
 800428e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004292:	d812      	bhi.n	80042ba <_realloc_r+0x5a>
 8004294:	4621      	mov	r1, r4
 8004296:	4640      	mov	r0, r8
 8004298:	f7ff ff6e 	bl	8004178 <_malloc_r>
 800429c:	4605      	mov	r5, r0
 800429e:	2800      	cmp	r0, #0
 80042a0:	d0ed      	beq.n	800427e <_realloc_r+0x1e>
 80042a2:	42bc      	cmp	r4, r7
 80042a4:	4622      	mov	r2, r4
 80042a6:	4631      	mov	r1, r6
 80042a8:	bf28      	it	cs
 80042aa:	463a      	movcs	r2, r7
 80042ac:	f7ff fed4 	bl	8004058 <memcpy>
 80042b0:	4631      	mov	r1, r6
 80042b2:	4640      	mov	r0, r8
 80042b4:	f7ff fef8 	bl	80040a8 <_free_r>
 80042b8:	e7e1      	b.n	800427e <_realloc_r+0x1e>
 80042ba:	4635      	mov	r5, r6
 80042bc:	e7df      	b.n	800427e <_realloc_r+0x1e>
	...

080042c0 <_sbrk_r>:
 80042c0:	b538      	push	{r3, r4, r5, lr}
 80042c2:	2300      	movs	r3, #0
 80042c4:	4d05      	ldr	r5, [pc, #20]	; (80042dc <_sbrk_r+0x1c>)
 80042c6:	4604      	mov	r4, r0
 80042c8:	4608      	mov	r0, r1
 80042ca:	602b      	str	r3, [r5, #0]
 80042cc:	f7fc ffee 	bl	80012ac <_sbrk>
 80042d0:	1c43      	adds	r3, r0, #1
 80042d2:	d102      	bne.n	80042da <_sbrk_r+0x1a>
 80042d4:	682b      	ldr	r3, [r5, #0]
 80042d6:	b103      	cbz	r3, 80042da <_sbrk_r+0x1a>
 80042d8:	6023      	str	r3, [r4, #0]
 80042da:	bd38      	pop	{r3, r4, r5, pc}
 80042dc:	20000118 	.word	0x20000118

080042e0 <__malloc_lock>:
 80042e0:	4801      	ldr	r0, [pc, #4]	; (80042e8 <__malloc_lock+0x8>)
 80042e2:	f000 b811 	b.w	8004308 <__retarget_lock_acquire_recursive>
 80042e6:	bf00      	nop
 80042e8:	2000011c 	.word	0x2000011c

080042ec <__malloc_unlock>:
 80042ec:	4801      	ldr	r0, [pc, #4]	; (80042f4 <__malloc_unlock+0x8>)
 80042ee:	f000 b80c 	b.w	800430a <__retarget_lock_release_recursive>
 80042f2:	bf00      	nop
 80042f4:	2000011c 	.word	0x2000011c

080042f8 <_malloc_usable_size_r>:
 80042f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042fc:	1f18      	subs	r0, r3, #4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	bfbc      	itt	lt
 8004302:	580b      	ldrlt	r3, [r1, r0]
 8004304:	18c0      	addlt	r0, r0, r3
 8004306:	4770      	bx	lr

08004308 <__retarget_lock_acquire_recursive>:
 8004308:	4770      	bx	lr

0800430a <__retarget_lock_release_recursive>:
 800430a:	4770      	bx	lr

0800430c <_init>:
 800430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430e:	bf00      	nop
 8004310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004312:	bc08      	pop	{r3}
 8004314:	469e      	mov	lr, r3
 8004316:	4770      	bx	lr

08004318 <_fini>:
 8004318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431a:	bf00      	nop
 800431c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800431e:	bc08      	pop	{r3}
 8004320:	469e      	mov	lr, r3
 8004322:	4770      	bx	lr
